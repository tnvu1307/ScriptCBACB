SET DEFINE OFF;
CREATE OR REPLACE PACKAGE cspks_feecalcnew IS
    PROCEDURE PRC_SEDEPO(P_TXDATE IN DATE, P_TXNUM IN VARCHAR2, P_ERR_CODE OUT VARCHAR2);
    PROCEDURE PRC_ORDER(P_TXDATE IN DATE, P_TXNUM IN VARCHAR2, P_ERR_CODE OUT VARCHAR2);
    PROCEDURE PRC_MINIMUM(P_TXDATE IN DATE, P_TXNUM IN VARCHAR2, P_ERR_CODE OUT VARCHAR2);
    PROCEDURE PRC_OTHER(P_TXDATE IN DATE, P_TXNUM IN VARCHAR2, P_ERR_CODE OUT VARCHAR2);
    PROCEDURE PRC_FEEBOOKINGRESULTAUTO(P_TXDATE IN DATE, P_TXNUM IN VARCHAR2, P_ERR_CODE OUT VARCHAR2);
END;
/


CREATE OR REPLACE PACKAGE BODY cspks_feecalcnew IS
    PKGCTX   PLOG.LOG_CTX;
    LOGROW   TLOGDEBUG%ROWTYPE;

    PROCEDURE PRC_SEDEPO(P_TXDATE IN DATE, P_TXNUM IN VARCHAR2, P_ERR_CODE OUT VARCHAR2)
    IS
        V_SYSVAR VARCHAR2(100);
        V_CURRDATE DATE;
        V_RESULT NUMBER;
        V_FEECD VARCHAR2(50);
        V_FEEAMT NUMBER;
        V_FEERATE NUMBER;
        V_CCYCD VARCHAR2(50);
        V_FEECODE VARCHAR2(50);
        V_TAX NUMBER;
        V_VATRATE NUMBER;
        V_AUTOID NUMBER;
        V_AUTOIDDETAIL NUMBER;
        V_FEETYPES VARCHAR2(50);
        V_SUBTYPES VARCHAR2(50);
        V_DESC VARCHAR2(500);
        V_COUNT NUMBER;
    BEGIN
        PLOG.SETBEGINSECTION(PKGCTX, 'PRC_SEDEPO');

        V_CURRDATE := P_TXDATE;
        SELECT VARVALUE INTO V_SYSVAR FROM SYSVAR WHERE VARNAME = 'DEALINGCUSTODYCD';

        --xoa phi da gen
        SELECT COUNT(1) INTO V_COUNT FROM FEETRANA WHERE TXDATE = V_CURRDATE AND TXNUM = 'SEDEPO';
        IF V_COUNT > 0 THEN
            DELETE FROM FEETRANDETAILHIST WHERE REFID IN (SELECT AUTOID FROM FEETRANA WHERE TXDATE = V_CURRDATE AND TXNUM = 'SEDEPO');
            DELETE FROM FEETRANA WHERE TXDATE = V_CURRDATE AND TXNUM = 'SEDEPO';
        END IF;

        SELECT COUNT(1) INTO V_COUNT FROM FEETRAN WHERE TXDATE = V_CURRDATE AND TXNUM = 'SEDEPO';
        IF V_COUNT > 0 THEN
            DELETE FROM FEETRANDETAIL WHERE REFID IN (SELECT AUTOID FROM FEETRAN WHERE TXDATE = V_CURRDATE AND TXNUM = 'SEDEPO');
            DELETE FROM FEETRAN WHERE TXDATE = V_CURRDATE AND TXNUM = 'SEDEPO';
        END IF;

        SELECT COUNT(1) INTO V_COUNT FROM FEE_BOOKING_RESULT WHERE TXDATE = V_CURRDATE AND BANKGLOBALID = FN_GETGLOBALID(V_CURRDATE,'SEDEPO') AND STATUS = 'P';

        IF V_COUNT > 0 THEN
            UPDATE FEE_BOOKING_RESULT SET DELTD = 'Y' WHERE TXDATE = V_CURRDATE AND BANKGLOBALID = FN_GETGLOBALID(V_CURRDATE,'SEDEPO') AND STATUS = 'P';
        END IF;

        --gen phi moi
        FOR REC IN
        (
            SELECT A.CUSTODYCD, SUM(A.SEBAL) SEBAL, SUM(A.ASSET_VND) ASSET_VND,SUM(A.ASSET_USD) ASSET_USD
            FROM
            (
                SELECT CF.CUSTODYCD, SED.SEBAL,
                    (CASE WHEN SB.TRADEPLACE IN ('001','002','005','006') THEN
                            (
                                CASE WHEN SB.SECTYPE IN ('001','002','007','008','011') THEN SED.SEBAL * INF.CLOSEPRICE
                                     WHEN SB.SECTYPE IN ('003','006','009','012','013') THEN SED.SEBAL * SB.PARVALUE
                                ELSE 0 END
                            )
                          WHEN SB.TRADEPLACE IN ('003','010','099') THEN SED.SEBAL * SB.PARVALUE
                      ELSE 0 END) * NVL(EX1.VND,1) ASSET_VND,
                    ROUND((CASE WHEN SB.TRADEPLACE IN ('001','002','005','006') THEN
                            (
                                CASE WHEN SB.SECTYPE IN ('001','002','007','008','011') THEN SED.SEBAL * INF.CLOSEPRICE
                                     WHEN SB.SECTYPE IN ('003','006','009','012','013') THEN SED.SEBAL * SB.PARVALUE
                                ELSE 0 END
                            )
                         WHEN SB.TRADEPLACE IN ('003','010','099') THEN SED.SEBAL * SB.PARVALUE
                         ELSE 0 END) * (NVL(EX1.VND,1)/NVL(EX.VND,1))
                    ,4) ASSET_USD
                FROM
                (
                    SELECT * FROM SEDEPO_DAILY WHERE TRADEDATE = V_CURRDATE
                ) SED,
                (
                    SELECT CODEID, CLOSEPRICE FROM SECURITIES_INFO_HIST WHERE HISTDATE = V_CURRDATE
                    UNION ALL
                    SELECT CODEID, CLOSEPRICE
                    FROM SECURITIES_INFO SE
                    WHERE NOT EXISTS (
                        SELECT 1 FROM SECURITIES_INFO_HIST SE2 WHERE SE2.HISTDATE = V_CURRDATE AND SE2.CODEID = SE.CODEID
                    )
                ) INF,
                (
                    SELECT EB2.CURRENCY, EB2.VND
                    FROM
                    (
                        SELECT CURRENCY, ITYPE, RTYPE, MAX(LASTCHANGE) LASTCHANGE
                        FROM
                        (
                            SELECT * FROM EXCHANGERATE
                            UNION ALL
                            SELECT * FROM EXCHANGERATE_HIST
                        )
                        WHERE TO_DATE(TO_CHAR(LASTCHANGE,SYSTEMNUMS.C_DATE_FORMAT),SYSTEMNUMS.C_DATE_FORMAT) <= V_CURRDATE
                        AND CURRENCY = 'USD'
                        AND ITYPE = 'SHV'
                        AND RTYPE = 'TTM'
                        GROUP BY CURRENCY, ITYPE, RTYPE
                    )EB1,
                    (
                        SELECT * FROM EXCHANGERATE
                        UNION ALL
                        SELECT * FROM EXCHANGERATE_HIST
                    )EB2
                    WHERE EB1.CURRENCY = EB2.CURRENCY
                    AND EB1.ITYPE = EB2.ITYPE
                    AND EB1.RTYPE = EB2.RTYPE
                    AND EB1.LASTCHANGE = EB2.LASTCHANGE
                )EX,-- LAY TI GIA USD
                (
                    SELECT A.CURRENCY,A.VND,B.CCYCD
                    FROM (
                        SELECT EB2.*
                        FROM
                        (
                            SELECT CURRENCY, ITYPE, RTYPE, MAX(LASTCHANGE) LASTCHANGE
                            FROM (
                            SELECT * FROM EXCHANGERATE
                            UNION ALL
                            SELECT * FROM EXCHANGERATE_HIST
                        )
                        WHERE TO_DATE(TO_CHAR(LASTCHANGE,SYSTEMNUMS.C_DATE_FORMAT),SYSTEMNUMS.C_DATE_FORMAT) <= V_CURRDATE
                        AND ITYPE = 'SHV'
                        AND RTYPE = 'TTM'
                        GROUP BY CURRENCY, ITYPE, RTYPE
                        )EB1,
                        (
                            SELECT * FROM EXCHANGERATE
                            UNION ALL
                            SELECT * FROM EXCHANGERATE_HIST
                        )EB2
                        WHERE EB1.CURRENCY = EB2.CURRENCY
                        AND EB1.ITYPE = EB2.ITYPE
                        AND EB1.RTYPE = EB2.RTYPE
                        AND EB1.LASTCHANGE = EB2.LASTCHANGE
                    )A, -- LAY TI GIA
                    (
                        SELECT * FROM SBCURRENCY
                    )B -- LAY DON VI TIEN TE
                    WHERE A.CURRENCY = B.SHORTCD
                )EX1, --LAY TI GIA CHUNG KHOAN
                (
                    SELECT * FROM CFMAST WHERE SUPEBANK = 'N' AND CUSTATCOM = 'Y' AND BONDAGENT <> 'Y' AND SUBSTR(CUSTODYCD,0,4) <> V_SYSVAR AND STATUS <> 'C'
                ) CF,
                (
                    SELECT * FROM SBSECURITIES WHERE NVL(MANAGEMENTTYPE,'LKCK') = 'LKCK'
                ) SB
                WHERE SED.CODEID = SB.CODEID
                AND SED.AFACCTNO = CF.CUSTID
                AND INF.CODEID = (CASE WHEN SB.TRADEPLACE = '006' THEN SB.REFCODEID ELSE SED.CODEID END)
                AND SB.CCYCD = EX1.CCYCD(+)
            ) A
            GROUP BY A.CUSTODYCD
        )
        LOOP
            BEGIN
                --LOCPT GOI LAN 1 DE LAY DC V_CCYCD
                V_RESULT := CSPKS_FEECALC.FN_SEDEPO_CALC2(REC.CUSTODYCD, REC.ASSET_VND, REC.SEBAL, V_CURRDATE, V_FEECD, V_FEEAMT, V_FEERATE, V_CCYCD, V_FEECODE);
                --LAN 2 MOI RA SO TIEN PHI DUNG
                IF V_CCYCD = 'USD' THEN
                    V_RESULT := CSPKS_FEECALC.FN_SEDEPO_CALC2(REC.CUSTODYCD, REC.ASSET_USD, REC.SEBAL, V_CURRDATE, V_FEECD, V_FEEAMT, V_FEERATE, V_CCYCD, V_FEECODE);
                END IF;

                --trung.luu: 21-09-2020  SHBVNEX-1569
                IF V_FEECD IS NOT NULL OR V_FEECD <> '' THEN
                    V_RESULT := CSPKS_FEECALC.FN_TAX_CALC2(REC.CUSTODYCD, V_FEEAMT, V_CCYCD, V_FEECD, 0, V_CURRDATE, V_TAX, V_VATRATE);
                END IF;
            EXCEPTION WHEN OTHERS THEN
                V_RESULT := -1;
                P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
                PLOG.ERROR(PKGCTX, SQLERRM ||':'|| DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
               
                RAISE ERRNUMS.E_SYSTEM_ERROR;
            END;

            IF V_RESULT = 0 THEN
                SELECT FE.VATRATE, FE.REFCODE, FE.SUBTYPE
                INTO V_VATRATE, V_FEETYPES, V_SUBTYPES
                FROM FEEMASTER FE
                WHERE FEECD = V_FEECD;

                SELECT EN_DISPLAY
                INTO V_DESC
                FROM VW_FEEDETAILS_ALL
                WHERE FILTERCD = V_SUBTYPES
                AND ID = V_FEETYPES;

                V_AUTOID := SEQ_FEETRAN.NEXTVAL;

                INSERT INTO FEETRAN (TXDATE, TXNUM, DELTD, FEECD, GLACCTNO, TXAMT, FEEAMT, FEERATE, VATRATE, VATAMT, AUTOID, TRDESC, CCYCD, ORDERID, TYPE, DEDUCTEDPLACE, STATUS, PAIDDATE, PSTATUS, SUBTYPE, FEETYPES, CUSTODYCD, FEECODE)
                VALUES (V_CURRDATE, 'SEDEPO', 'N', V_FEECD, NULL, DECODE(V_CCYCD,'VND',REC.ASSET_VND,REC.ASSET_USD), V_FEEAMT, V_FEERATE, V_VATRATE, V_TAX, V_AUTOID , V_DESC||' DATED '||TO_CHAR(V_CURRDATE,'DD MON YYYY'), V_CCYCD, NULL, 'F', NULL, 'N', NULL, NULL, '001', 'SEDEPO', REC.CUSTODYCD, V_FEECODE);

                V_AUTOIDDETAIL := SEQ_FEETRANDETAIL.NEXTVAL;
                INSERT INTO FEETRANDETAIL (AUTOID, REFID, TXDATE, TXNUM, SUBTYPE, FEETYPES, TXAMT, FEEAMT, ORDERID, CUSTODYCD, CCYCD, RATEAMT, FORP, SEBAL, ASSET)
                VALUES (V_AUTOIDDETAIL, V_AUTOID, V_CURRDATE, 'SEDEPO', '001', 'SEDEPO', DECODE(V_CCYCD,'VND',REC.ASSET_VND,REC.ASSET_USD), V_FEEAMT, NULL, REC.CUSTODYCD ,V_CCYCD,0.0000,'F', REC.SEBAL , DECODE(V_CCYCD,'VND',REC.ASSET_VND,REC.ASSET_USD));

                IF V_VATRATE > 0 THEN
                    INSERT INTO FEETRANDETAIL (AUTOID, REFID, TXDATE, TXNUM, SUBTYPE, FEETYPES, TXAMT, FEEAMT, ORDERID, CUSTODYCD, CCYCD, RATEAMT, FORP, SEBAL, ASSET, PAUTOID)
                    VALUES (SEQ_FEETRANDETAIL.NEXTVAL, V_AUTOID, V_CURRDATE, 'SEDEPO', '001', 'SEDEPO' , V_FEEAMT, 0.0000, NULL, REC.CUSTODYCD, V_CCYCD, V_TAX, 'T', REC.SEBAL, DECODE(V_CCYCD,'VND',REC.ASSET_VND,REC.ASSET_USD), V_AUTOIDDETAIL);
                END IF;
            END IF;
        END LOOP;
        PLOG.SETENDSECTION (PKGCTX, 'PRC_SEDEPO');
    EXCEPTION WHEN OTHERS THEN
        P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
        PLOG.ERROR (PKGCTX, SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
        PLOG.SETENDSECTION (PKGCTX, 'PRC_SEDEPO');
        RAISE ERRNUMS.E_SYSTEM_ERROR;
    END PRC_SEDEPO;

    PROCEDURE PRC_ORDER(P_TXDATE IN DATE, P_TXNUM IN VARCHAR2, P_ERR_CODE OUT VARCHAR2)
    IS
        V_CURRDATE DATE;
        L_AMCID VARCHAR2(50);
        L_GCBID VARCHAR2(50);
        L_COUNT NUMBER;
        V_CFDESC VARCHAR2(500);
        L_COUNTAMC NUMBER;
        L_COUNTGCB NUMBER;
        V_RESULT NUMBER;
        V_FEECD VARCHAR2(50);
        V_FEEAMT NUMBER;
        V_CCYCD VARCHAR2(50);
        V_FEERATE NUMBER;
        V_FEECODE VARCHAR2(50);
        V_TAX NUMBER;
        V_VATRATE NUMBER;
        V_FEETYPES VARCHAR2(50);
        V_SUBTYPES VARCHAR2(50);
        V_DESC VARCHAR2(500);
        V_AUTOID NUMBER;
        V_COUNT NUMBER;
    BEGIN
        PLOG.SETBEGINSECTION(PKGCTX, 'PRC_ORDER');
        V_CURRDATE := P_TXDATE;

        --xoa phi da gen
        SELECT COUNT(1) INTO V_COUNT FROM FEETRANA WHERE TXDATE = V_CURRDATE AND TXNUM = 'ORDER';
        IF V_COUNT > 0 THEN
            DELETE FROM FEETRANDETAILHIST WHERE REFID IN (SELECT AUTOID FROM FEETRANA WHERE TXDATE = V_CURRDATE AND TXNUM = 'ORDER');
            DELETE FROM FEETRANA WHERE TXDATE = V_CURRDATE AND TXNUM = 'ORDER';
        END IF;

        SELECT COUNT(1) INTO V_COUNT FROM FEETRAN WHERE TXDATE = V_CURRDATE AND TXNUM = 'ORDER';
        IF V_COUNT > 0 THEN
            DELETE FROM FEETRANDETAIL WHERE REFID IN (SELECT AUTOID FROM FEETRAN WHERE TXDATE = V_CURRDATE AND TXNUM = 'ORDER');
            DELETE FROM FEETRAN WHERE TXDATE = V_CURRDATE AND TXNUM = 'ORDER';
        END IF;

        SELECT COUNT(1) INTO V_COUNT FROM FEE_BOOKING_RESULT WHERE TXDATE = V_CURRDATE AND BANKGLOBALID = FN_GETGLOBALID(V_CURRDATE,'ORDER') AND STATUS = 'P';

        IF V_COUNT > 0 THEN
            UPDATE FEE_BOOKING_RESULT SET DELTD = 'Y' WHERE TXDATE = V_CURRDATE AND BANKGLOBALID = FN_GETGLOBALID(V_CURRDATE,'ORDER') AND STATUS = 'P';
        END IF;

        SELECT COUNT(1) INTO V_COUNT FROM FEETRANREPAIRHIST WHERE STATUS = 'A' AND DELTD <> 'Y' AND TO_CHAR(CLEARDATE,'MMRRRR') = TO_CHAR(V_CURRDATE,'MMRRRR');
        IF V_COUNT > 0 THEN
            INSERT INTO FEETRANREPAIR SELECT * FROM FEETRANREPAIRHIST WHERE STATUS = 'A' AND DELTD <> 'Y' AND TO_CHAR(CLEARDATE,'MMRRRR') = TO_CHAR(V_CURRDATE,'MMRRRR');
            UPDATE FEETRANREPAIR SET STATUS = 'P' WHERE STATUS = 'A';
            UPDATE FEETRANREPAIRHIST SET DELTD = 'Y' WHERE STATUS = 'A' AND DELTD <> 'Y' AND TO_CHAR(CLEARDATE,'MMRRRR') = TO_CHAR(V_CURRDATE,'MMRRRR');
        END IF;

        --gen phi moi
        FOR REC IN
        (
            SELECT A.CUSTODYCD, A.CUSTID, A.AMCID, A.GCBID, A.ORDERID, SUM(A.AMT_VND) AMT_VND, SUM(A.AMT_USD) AMT_USD, COUNT(1) FEENUM
            FROM
            (
                SELECT CF.CUSTODYCD, FE.AMOUNT * NVL(EX1.VND,1) AMT_VND, FE.AMOUNT * (NVL(EX1.VND,1)/NVL(EX.VND,1)) AMT_USD, CF.CUSTID, CF.AMCID, CF.GCBID, FE.ORDERID
                FROM VW_ODMAST_ALL OD,
                (
                    SELECT * FROM CFMAST WHERE SUPEBANK = 'N' AND BONDAGENT <> 'Y' AND STATUS <> 'C'
                ) CF,
                (
                    SELECT * FROM FEETRANREPAIR FE WHERE FE.STATUS = 'P' AND FE.DELTD <> 'Y' AND TO_CHAR(CLEARDATE,'MMRRRR') = TO_CHAR(V_CURRDATE,'MMRRRR')
                ) FE,
                (
                    SELECT EB2.CURRENCY, EB2.VND
                    FROM
                    (
                        SELECT CURRENCY, ITYPE, RTYPE, MAX(LASTCHANGE) LASTCHANGE
                        FROM
                        (
                            SELECT * FROM EXCHANGERATE
                            UNION ALL
                            SELECT * FROM EXCHANGERATE_HIST
                        )
                        WHERE TO_DATE(TO_CHAR(LASTCHANGE,SYSTEMNUMS.C_DATE_FORMAT),SYSTEMNUMS.C_DATE_FORMAT) <= V_CURRDATE
                        AND CURRENCY = 'USD'
                        AND ITYPE = 'SHV'
                        AND RTYPE = 'TTM'
                        GROUP BY CURRENCY, ITYPE, RTYPE
                    )EB1,
                    (
                        SELECT * FROM EXCHANGERATE
                        UNION ALL
                        SELECT * FROM EXCHANGERATE_HIST
                    )EB2
                    WHERE EB1.CURRENCY = EB2.CURRENCY
                    AND EB1.ITYPE = EB2.ITYPE
                    AND EB1.RTYPE = EB2.RTYPE
                    AND EB1.LASTCHANGE = EB2.LASTCHANGE
                )EX,-- LAY TI GIA USD
                (
                    SELECT A.CURRENCY,A.VND,B.CCYCD
                    FROM (
                        SELECT EB2.*
                        FROM
                        (
                            SELECT CURRENCY, ITYPE, RTYPE, MAX(LASTCHANGE) LASTCHANGE
                            FROM (
                            SELECT * FROM EXCHANGERATE
                            UNION ALL
                            SELECT * FROM EXCHANGERATE_HIST
                        )
                        WHERE TO_DATE(TO_CHAR(LASTCHANGE,SYSTEMNUMS.C_DATE_FORMAT),SYSTEMNUMS.C_DATE_FORMAT) <= V_CURRDATE
                        AND ITYPE = 'SHV'
                        AND RTYPE = 'TTM'
                        GROUP BY CURRENCY, ITYPE, RTYPE
                        )EB1,
                        (
                            SELECT * FROM EXCHANGERATE
                            UNION ALL
                            SELECT * FROM EXCHANGERATE_HIST
                        )EB2
                        WHERE EB1.CURRENCY = EB2.CURRENCY
                        AND EB1.ITYPE = EB2.ITYPE
                        AND EB1.RTYPE = EB2.RTYPE
                        AND EB1.LASTCHANGE = EB2.LASTCHANGE
                    )A, -- LAY TI GIA
                    (
                        SELECT * FROM SBCURRENCY
                    )B -- LAY DON VI TIEN TE
                    WHERE A.CURRENCY = B.SHORTCD
                )EX1,
                (
                    SELECT * FROM SBSECURITIES WHERE NVL(MANAGEMENTTYPE,'LKCK') = 'LKCK'
                ) SB
                WHERE FE.CUSTID = CF.CUSTID
                AND FE.ORDERID = OD.ORDERID
                AND OD.CODEID = SB.CODEID
                AND SB.CCYCD = EX1.CCYCD(+)
            ) A
            GROUP BY A.CUSTODYCD, A.CUSTID, A.AMCID, A.GCBID, A.ORDERID
        )
        LOOP
            L_AMCID := REC.AMCID;
            L_GCBID := REC.GCBID;

            SELECT COUNT(1) INTO L_COUNT
            FROM CFFEEEXP CF, FEEMASTER FE
            WHERE CUSTODYCD = REC.CUSTODYCD
            AND CF.FEECD = FE.FEECD
            AND FE.SUBTYPE = '001'
            AND FE.REFCODE = 'TRANREPAIR'
            AND FE.STATUS = 'Y'
            AND CF.EFFDATE <= V_CURRDATE
            AND CF.EXPDATE >= V_CURRDATE;

            IF L_COUNT > 0 THEN
                V_CFDESC:='FUND';
            ELSE
                SELECT COUNT(AMCID) INTO L_COUNTAMC
                FROM CFFEEEXP CF, FEEMASTER FE
                WHERE AMCID = L_AMCID
                AND CF.FEECD = FE.FEECD
                AND FE.SUBTYPE = '001'
                AND FE.REFCODE = 'TRANREPAIR'
                AND FE.STATUS = 'Y'
                AND CF.EFFDATE <= V_CURRDATE;

                IF L_COUNTAMC > 0 THEN
                    V_CFDESC:='AMC';
                ELSE
                    SELECT COUNT(AMCID) INTO L_COUNTGCB
                    FROM CFFEEEXP CF, FEEMASTER FE
                    WHERE AMCID = L_GCBID
                    AND CF.FEECD = FE.FEECD
                    AND FE.SUBTYPE = '001'
                    AND FE.REFCODE = 'TRANREPAIR'
                    AND FE.STATUS = 'Y'
                    AND CF.EFFDATE <= V_CURRDATE;

                    IF L_COUNTGCB > 0 THEN
                        V_CFDESC:='GCB';
                    ELSE
                        V_CFDESC:='MASTER';
                    END IF;
                END IF;
            END IF;

            BEGIN
                V_RESULT := CSPKS_FEECALC.FN_ORDER_CALC2(REC.CUSTODYCD, L_AMCID, L_GCBID, REC.AMT_VND, REC.FEENUM, V_CURRDATE, V_FEECD, V_FEEAMT, V_FEERATE, V_CCYCD, V_CFDESC, V_FEECODE);
                IF V_CCYCD = 'USD' THEN
                    V_RESULT := CSPKS_FEECALC.FN_ORDER_CALC2(REC.CUSTODYCD, L_AMCID, L_GCBID, REC.AMT_USD, REC.FEENUM, V_CURRDATE, V_FEECD, V_FEEAMT, V_FEERATE, V_CCYCD, V_CFDESC, V_FEECODE);
                END IF;

                IF V_FEECD IS NOT NULL OR V_FEECD <> '' THEN
                    V_RESULT := CSPKS_FEECALC.FN_TAX_CALC2(REC.CUSTODYCD, V_FEEAMT, V_CCYCD, V_FEECD, 0, V_CURRDATE, V_TAX, V_VATRATE);
                END IF;
            EXCEPTION WHEN OTHERS THEN
                V_RESULT := -1;
                P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
                PLOG.ERROR (PKGCTX, SQLERRM ||':'|| DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
                
                RAISE ERRNUMS.E_SYSTEM_ERROR;
            END;
            IF V_RESULT = 0 THEN
                SELECT FE.REFCODE, FE.SUBTYPE INTO V_FEETYPES, V_SUBTYPES
                FROM FEEMASTER FE
                WHERE FEECD = V_FEECD;

                SELECT EN_DISPLAY INTO V_DESC
                FROM VW_FEEDETAILS_ALL
                WHERE FILTERCD = V_SUBTYPES
                AND ID = V_FEETYPES;

                V_AUTOID := SEQ_FEETRAN.NEXTVAL;

                INSERT INTO FEETRAN (TXDATE, TXNUM, DELTD, FEECD, GLACCTNO, TXAMT, FEEAMT, FEERATE, VATRATE, VATAMT, AUTOID, TRDESC, CCYCD, ORDERID, TYPE, DEDUCTEDPLACE, STATUS, PAIDDATE, PSTATUS, SUBTYPE, FEETYPES, CUSTODYCD,FEECODE)
                VALUES (V_CURRDATE, 'ORDER', 'N', V_FEECD , NULL, DECODE(V_CCYCD,'VND',REC.AMT_VND,REC.AMT_USD), V_FEEAMT, V_FEERATE, V_VATRATE, V_TAX, V_AUTOID , V_DESC || ' dated ' || TO_CHAR(V_CURRDATE,'DD MON YYYY'), V_CCYCD, NULL, 'F', NULL, 'N', NULL, NULL, '001', 'TRANREPAIR', REC.CUSTODYCD, V_FEECODE);

                UPDATE FEETRANREPAIR FE
                SET FE.FEEAMT = V_FEEAMT / REC.FEENUM,
                FE.STATUS = 'A'
                WHERE FE.CUSTID = REC.CUSTID
                AND FE.ORDERID = REC.ORDERID
                AND FE.DELTD <> 'Y';

                INSERT INTO FEETRANDETAIL
                SELECT SEQ_FEETRANDETAIL.NEXTVAL AUTOID, V_AUTOID REFID, FE.TXDATE, FE.TXNUM, '001' SUBTYPE, 'TRANREPAIR' FEETYPES,
                    FE.AMOUNT  TXAMT, FE.FEEAMT, FE.ORDERID, REC.CUSTODYCD, V_CCYCD CCYCD, 0 RATEAMT, 'F' FORP, SB.CODEID, 0 SEBAL , 0 ASSET, NULL PAUTOID
                FROM FEETRANREPAIR FE, SBSECURITIES SB
                WHERE FE.STATUS = 'A'
                AND FE.DELTD <> 'Y'
                AND FE.SYMBOL = SB.SYMBOL
                AND FE.CUSTID = REC.CUSTID
                AND FE.ORDERID = REC.ORDERID;

                IF V_VATRATE > 0 THEN
                    INSERT INTO FEETRANDETAIL
                    SELECT SEQ_FEETRANDETAIL.NEXTVAL AUTOID, V_AUTOID REFID, FE.TXDATE, FE.TXNUM, '001' SUBTYPE, 'TRANREPAIR' FEETYPES,
                        FE.FEEAMT  TXAMT, 0.0000 FEEAMT, FE.ORDERID, REC.CUSTODYCD, V_CCYCD CCYCD, V_TAX / REC.FEENUM RATEAMT, 'T' FORP, SB.CODEID, 0 SEBAL , 0 ASSET, FL.AUTOID PAUTOID
                    FROM FEETRANREPAIR FE, SBSECURITIES SB, FEETRANDETAIL FL
                    WHERE FE.STATUS = 'A'
                    AND FE.DELTD <> 'Y'
                    AND FE.SYMBOL = SB.SYMBOL
                    AND FE.TXDATE = FL.TXDATE
                    AND FE.TXNUM = FL.TXNUM
                    AND FE.CUSTID = REC.CUSTID
                    AND FE.ORDERID = REC.ORDERID;
                END IF;
            END IF;
        END LOOP;

        INSERT INTO FEETRANREPAIRHIST
        SELECT *
        FROM FEETRANREPAIR FE
        WHERE FE.STATUS = 'A'
        AND FE.DELTD <> 'Y';

        DELETE FEETRANREPAIR WHERE STATUS = 'A' AND DELTD <> 'Y';

        PLOG.SETENDSECTION (PKGCTX, 'PRC_ORDER');
    EXCEPTION WHEN OTHERS THEN
        P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
        PLOG.ERROR (PKGCTX, SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
        PLOG.SETENDSECTION (PKGCTX, 'PRC_ORDER');
        RAISE ERRNUMS.E_SYSTEM_ERROR;
    END PRC_ORDER;

    PROCEDURE PRC_MINIMUM(P_TXDATE IN DATE, P_TXNUM IN VARCHAR2, P_ERR_CODE OUT VARCHAR2)
    IS
        V_SYSVAR VARCHAR2(100);
        V_CURRDATE DATE;
        V_FEECD VARCHAR2(50);
        V_REPAIRFEE NUMBER;
        V_FEECODE varchar2(50);
        V_CCYCD VARCHAR2(50);
        V_FEERATE NUMBER;
        V_VATRATE NUMBER;
        V_TOTALFEE NUMBER;
        V_VATAMT NUMBER;
        V_DESC VARCHAR2(500);
        V_COUNT NUMBER;
        V_AUTOID NUMBER;
        V_FEE_MINIUM NUMBER;
    BEGIN
        PLOG.SETBEGINSECTION(PKGCTX, 'PRC_MINIMUM');
        V_CURRDATE := P_TXDATE;
        SELECT VARVALUE INTO V_SYSVAR FROM SYSVAR WHERE VARNAME = 'DEALINGCUSTODYCD';
        --xoa phi da gen
        SELECT COUNT(1) INTO V_COUNT FROM FEETRANA WHERE TXDATE = V_CURRDATE AND TXNUM = 'MINIMUM';
        IF V_COUNT > 0 THEN
            DELETE FROM FEETRANDETAILHIST WHERE REFID IN (SELECT AUTOID FROM FEETRANA WHERE TXDATE = V_CURRDATE AND TXNUM = 'MINIMUM');
            DELETE FROM FEETRANA WHERE TXDATE = V_CURRDATE AND TXNUM = 'MINIMUM';
        END IF;

        SELECT COUNT(1) INTO V_COUNT FROM FEETRAN WHERE TXDATE = V_CURRDATE AND TXNUM = 'MINIMUM';
        IF V_COUNT > 0 THEN
            DELETE FROM FEETRANDETAIL WHERE REFID IN (SELECT AUTOID FROM FEETRAN WHERE TXDATE = V_CURRDATE AND TXNUM = 'MINIMUM');
            DELETE FROM FEETRAN WHERE TXDATE = V_CURRDATE AND TXNUM = 'MINIMUM';
        END IF;

        SELECT COUNT(1) INTO V_COUNT FROM FEE_BOOKING_RESULT WHERE TXDATE = V_CURRDATE AND BANKGLOBALID = FN_GETGLOBALID(V_CURRDATE,'MINIMUM') AND STATUS = 'P';

        IF V_COUNT > 0 THEN
            UPDATE FEE_BOOKING_RESULT SET DELTD = 'Y' WHERE TXDATE = V_CURRDATE AND BANKGLOBALID = FN_GETGLOBALID(V_CURRDATE,'MINIMUM') AND STATUS = 'P';
        END IF;

        --gen phi moi
        FOR REC IN
        (
            SELECT * FROM CFMAST CF
            WHERE CF.STATUS <> 'C'
            AND SUPEBANK = 'N'
            AND CF.CUSTATCOM = 'Y'
            AND CF.BONDAGENT <> 'Y'
            AND SUBSTR(CF.CUSTODYCD,0,4) <> V_SYSVAR
            ORDER BY CF.CUSTID
        )
        LOOP
            SELECT NVL(SUM(FE.FEEAMT),0) INTO V_TOTALFEE
            FROM VW_FEETRAN_ALL FE
            WHERE FE.CUSTODYCD = REC.CUSTODYCD
            AND ((FE.FEETYPES = 'SEDEPO' AND FE.SUBTYPE = '001') OR (FE.FEETYPES = 'TRANREPAIR' AND FE.SUBTYPE IN ('001','002')))
            AND FE.DELTD <> 'Y'
            AND FE.TYPE = 'F'
            AND TO_CHAR(V_CURRDATE, 'MM/RRRR') LIKE TO_CHAR(TO_DATE(FE.TXDATE, SYSTEMNUMS.C_DATE_FORMAT), 'MM/RRRR');

            BEGIN
                SELECT FE.FEECD INTO V_FEECD FROM FEEMASTER FE WHERE FE.REFCODE = 'OTHER' AND FE.SUBTYPE = '007' AND FE.STATUS = 'Y';
            EXCEPTION WHEN OTHERS THEN
                V_FEECD := '';
            END;

            SELECT COUNT(*) INTO V_COUNT
            FROM CFFEEEXP
            WHERE CUSTODYCD = REC.CUSTODYCD
            AND FEECD = V_FEECD
            AND EFFDATE <= V_CURRDATE
            AND EXPDATE >= V_CURRDATE;
            IF V_COUNT > 0 THEN
                --TRUNG.LUU : 26/06/2020 SHBVNEX-825 NEU KHAI BIEU PHI RIENG THI LAY CCYCD THEO BIEU PHI RIENG
                SELECT CF.FEECD, CF.FEEVAL, MST.FEECODE, NVL(CF.CCYCD,MST.CCYCD) CCYCD, MST.FEERATE, CF.VATRATE
                INTO V_FEECD, V_REPAIRFEE, V_FEECODE, V_CCYCD, V_FEERATE, V_VATRATE
                FROM CFFEEEXP CF, FEEMASTER MST
                WHERE CF.FEECD = MST.FEECD
                AND CF.CUSTODYCD = REC.CUSTODYCD
                AND MST.STATUS = 'Y'
                AND MST.REFCODE = 'OTHER'
                AND MST.SUBTYPE = '007'
                AND CF.EFFDATE <= V_CURRDATE
                AND CF.EXPDATE >= V_CURRDATE;
            ELSE
                SELECT COUNT(*) INTO V_COUNT
                FROM CFFEEEXP
                WHERE AMCID = REC.GCBID
                AND FEECD = V_FEECD
                AND EFFDATE <= V_CURRDATE
                AND EXPDATE >= V_CURRDATE;
                IF V_COUNT > 0 THEN
                    SELECT CF.FEECD, CF.FEEVAL, MST.FEECODE, NVL(CF.CCYCD,MST.CCYCD)CCYCD, MST.FEERATE, CF.VATRATE
                    INTO V_FEECD, V_REPAIRFEE, V_FEECODE, V_CCYCD, V_FEERATE, V_VATRATE
                    FROM CFFEEEXP CF, FEEMASTER MST
                    WHERE CF.FEECD = MST.FEECD
                    AND CF.AMCID = REC.GCBID
                    AND MST.STATUS = 'Y'
                    AND MST.REFCODE = 'OTHER'
                    AND MST.SUBTYPE = '007'
                    AND CF.EFFDATE <= V_CURRDATE
                    AND CF.EXPDATE >= V_CURRDATE;
                ELSE
                    SELECT FE.FEECD, FE.FEEAMT, FE.FEERATE, FE.CCYCD, FE.FEECODE, FE.VATRATE
                    INTO V_FEECD, V_REPAIRFEE, V_FEERATE, V_CCYCD, V_FEECODE, V_VATRATE
                    FROM FEEMASTER FE
                    WHERE FE.REFCODE = 'OTHER' AND FE.SUBTYPE = '007' AND FE.STATUS = 'Y';
                END IF;
            END IF;

            SELECT EN_DISPLAY INTO V_DESC FROM VW_FEEDETAILS_ALL WHERE FILTERCD = '007' AND ID = 'OTHER';
            IF REC.COUNTRY = '234' THEN
                V_DESC := 'Phi duy tri toi thieu '|| TO_CHAR(TO_DATE(V_CURRDATE, SYSTEMNUMS.C_DATE_FORMAT), 'MM/RRRR');
            ELSE
                V_DESC := 'Minimum charge '|| TO_CHAR(TO_DATE(V_CURRDATE, SYSTEMNUMS.C_DATE_FORMAT), 'MM/RRRR');
            END IF;

            IF(V_REPAIRFEE > V_TOTALFEE ) THEN
                V_AUTOID := SEQ_FEETRAN.NEXTVAL;
                V_FEE_MINIUM := V_REPAIRFEE - V_TOTALFEE;

                IF V_CCYCD <> 'VND' THEN
                    V_FEE_MINIUM:= ROUND(V_FEE_MINIUM,2);
                    V_VATAMT:=  ROUND(V_FEE_MINIUM * V_VATRATE/100,2);
                ELSE
                    V_FEE_MINIUM:= ROUND(V_FEE_MINIUM,0);
                    V_VATAMT:=  ROUND(V_FEE_MINIUM * V_VATRATE/100,0);
                END IF;

                INSERT INTO FEETRAN (TXDATE, TXNUM, DELTD, FEECD, GLACCTNO, TXAMT, FEEAMT, FEERATE, VATRATE, VATAMT, AUTOID, TRDESC, CCYCD, ORDERID, TYPE, DEDUCTEDPLACE, STATUS, PAIDDATE, PSTATUS, SUBTYPE, FEETYPES, CUSTODYCD, FEECODE)
                VALUES (V_CURRDATE, 'MINIMUM', 'N', V_FEECD , NULL, 0.0000, V_FEE_MINIUM, V_FEERATE, V_VATRATE, V_VATAMT, V_AUTOID , 'Corresponding rounding amount', V_CCYCD, NULL, 'F', NULL, 'N', NULL, NULL, '007', 'OTHER' , REC.CUSTODYCD, V_FEECODE);

                INSERT INTO FEETRANDETAIL (AUTOID, REFID, TXDATE, TXNUM, SUBTYPE, FEETYPES, TXAMT, FEEAMT, ORDERID, CUSTODYCD, CCYCD, RATEAMT, FORP, SEBAL, ASSET)
                VALUES (SEQ_FEETRANDETAIL.NEXTVAL, V_AUTOID, V_CURRDATE, 'MINIMUM', '007', 'OTHER' , 0.0000,  V_FEE_MINIUM, NULL, REC.CUSTODYCD, V_CCYCD, 0.0000, 'F', 0 , 0);
            END IF;
        END LOOP;
        PLOG.SETENDSECTION (PKGCTX, 'PRC_MINIMUM');
    EXCEPTION WHEN OTHERS THEN
        P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
        PLOG.ERROR (PKGCTX, SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
        PLOG.SETENDSECTION (PKGCTX, 'PRC_MINIMUM');
        RAISE ERRNUMS.E_SYSTEM_ERROR;
    END PRC_MINIMUM;

    PROCEDURE PRC_OTHER(P_TXDATE IN DATE, P_TXNUM IN VARCHAR2, P_ERR_CODE OUT VARCHAR2)
    IS
        V_CURRDATE DATE;
        V_COUNT NUMBER;
        L_GLOBALID_SEDEPO VARCHAR2(100);
        L_GLOBALID_MINIMUM VARCHAR2(100);
        L_GLOBALID_ORDER VARCHAR2(100);
    BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'PRC_OTHER');
    V_CURRDATE := P_TXDATE;
    SELECT COUNT(1) INTO V_COUNT
    FROM FEETRANA
    WHERE TO_CHAR(TXDATE, 'MMRRRR') = TO_CHAR(V_CURRDATE, 'MMRRRR')
    AND TXNUM NOT IN ('SEDEPO', 'MINIMUM', 'ORDER')
    AND FEETYPES NOT IN ('SETRAN','ASSETMNG','BONDMNG','PAYAGENCY','BONDOTHER')
    AND STATUS = 'S'
    AND DELTD = 'N';

    IF V_COUNT > 0 THEN
        INSERT INTO FEETRAN (
            SELECT * FROM FEETRANA
            WHERE TO_CHAR(TXDATE, 'MMRRRR') = TO_CHAR(V_CURRDATE, 'MMRRRR')
            AND TXNUM NOT IN ('SEDEPO', 'MINIMUM', 'ORDER')
            AND FEETYPES NOT IN ('SETRAN','ASSETMNG','BONDMNG','PAYAGENCY','BONDOTHER')
            AND STATUS = 'S'
            AND DELTD = 'N'
        );
        DELETE FROM FEETRANA
        WHERE TO_CHAR(TXDATE, 'MMRRRR') = TO_CHAR(V_CURRDATE, 'MMRRRR')
        AND TXNUM NOT IN ('SEDEPO', 'MINIMUM', 'ORDER')
        AND FEETYPES NOT IN ('SETRAN','ASSETMNG','BONDMNG','PAYAGENCY','BONDOTHER')
        AND STATUS = 'S'
        AND DELTD = 'N';
    END IF;

    UPDATE FEETRAN SET STATUS = 'N'
    WHERE TO_CHAR(TXDATE, 'MMRRRR') = TO_CHAR(V_CURRDATE, 'MMRRRR')
    AND TXNUM NOT IN ('SEDEPO', 'MINIMUM', 'ORDER')
    AND STATUS = 'S'
    AND FEETYPES NOT IN ('SETRAN','ASSETMNG','BONDMNG','PAYAGENCY','BONDOTHER')
    AND DELTD = 'N';

    L_GLOBALID_SEDEPO := FN_GETGLOBALID(V_CURRDATE, 'SEDEPO');
    L_GLOBALID_MINIMUM := FN_GETGLOBALID(V_CURRDATE,'MINIMUM');
    L_GLOBALID_ORDER := FN_GETGLOBALID(V_CURRDATE,'ORDER');

    SELECT COUNT(1) INTO V_COUNT
    FROM FEE_BOOKING_RESULT
    WHERE TO_CHAR(TXDATE, 'MMRRRR') = TO_CHAR(V_CURRDATE, 'MMRRRR')
    AND BANKGLOBALID NOT IN (L_GLOBALID_SEDEPO, L_GLOBALID_MINIMUM, L_GLOBALID_ORDER, 'CB.FEE1293', 'CB.FEE1290', 'CB.FEE1204')
    AND SUBSTR(BANKGLOBALID,1,2) <> 'FA'
    AND STATUS = 'P';

    IF V_COUNT > 0 THEN
        UPDATE FEE_BOOKING_RESULT SET DELTD = 'Y'
        WHERE TO_CHAR(TXDATE, 'MMRRRR') = TO_CHAR(V_CURRDATE, 'MMRRRR')
        AND BANKGLOBALID NOT IN (L_GLOBALID_SEDEPO, L_GLOBALID_MINIMUM, L_GLOBALID_ORDER, 'CB.FEE1293', 'CB.FEE1290', 'CB.FEE1204')
        AND SUBSTR(BANKGLOBALID,1,2) <> 'FA'
        AND STATUS = 'P';
    END IF;

    PLOG.SETENDSECTION (PKGCTX, 'PRC_OTHER');
    EXCEPTION WHEN OTHERS THEN
        P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
        PLOG.ERROR (PKGCTX, SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
        PLOG.SETENDSECTION (PKGCTX, 'PRC_MINIMUM');
        RAISE ERRNUMS.E_SYSTEM_ERROR;
    END PRC_OTHER;

    PROCEDURE PRC_FEEBOOKINGRESULTAUTO(P_TXDATE IN DATE, P_TXNUM IN VARCHAR2, P_ERR_CODE OUT VARCHAR2)
    IS
        V_CURRDATE DATE;
        V_BATCHNAME VARCHAR2(50);
        L_TXMSG TX.MSG_RECTYPE;
        L_ERR_PARAM VARCHAR2(1000);
    BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'PRC_FEEBOOKINGRESULTAUTO');
    V_CURRDATE := P_TXDATE;
    V_BATCHNAME := '1206';
    FOR REC IN
    (
        SELECT DISTINCT MST.TXDATE POSTDATE, MST.TXNUM, SUBSTR(MST.TRDESC,1,200) DESCRIPTION, MST.CUSTODYCD, MST.FEECODE
        FROM
        (
            SELECT *
            FROM VW_FEETRAN_ALL
            WHERE STATUS = 'N'
            AND DELTD <> 'Y'
            AND (TXDATE <= V_CURRDATE OR TO_CHAR(TXDATE,'MMRRRR') = TO_CHAR(V_CURRDATE,'MMRRRR'))
            AND FEETYPES NOT IN ('SETRAN','ASSETMNG','BONDMNG','PAYAGENCY','BONDOTHER')
        ) MST,
        (
            SELECT * FROM CFMAST WHERE BONDAGENT <> 'Y' AND STATUS NOT IN ('C')
        ) CF
        WHERE MST.CUSTODYCD = CF.CUSTODYCD
        ORDER BY MST.CUSTODYCD
    ) LOOP
        L_TXMSG.TLTXCD  := '1296';
        L_TXMSG.MSGTYPE := 'T';
        L_TXMSG.LOCAL   := 'N';
        L_TXMSG.TLID    := SYSTEMNUMS.C_SYSTEM_USERID;
        SELECT SYS_CONTEXT('USERENV', 'HOST'),
        SYS_CONTEXT('USERENV', 'IP_ADDRESS', 15)
        INTO L_TXMSG.WSNAME, L_TXMSG.IPADDRESS
        FROM DUAL;
        L_TXMSG.OFF_LINE  := 'N';
        L_TXMSG.DELTD     := TXNUMS.C_DELTD_TXNORMAL;
        L_TXMSG.TXSTATUS  := TXSTATUSNUMS.C_TXCOMPLETED;
        L_TXMSG.MSGSTS    := '0';
        L_TXMSG.OVRSTS    := '0';
        L_TXMSG.BATCHNAME := V_BATCHNAME;
        L_TXMSG.BUSDATE   := V_CURRDATE;
        L_TXMSG.TXDATE    := V_CURRDATE;
        L_TXMSG.REFTXNUM  := P_TXNUM;

        SELECT SYSTEMNUMS.C_BATCH_PREFIXED || LPAD(SEQ_BATCHTXNUM.NEXTVAL, 8, '0') INTO L_TXMSG.TXNUM FROM DUAL;

        SELECT TO_CHAR(SYSDATE, 'HH24:MI:SS') INTO L_TXMSG.TXTIME FROM DUAL;

        --trung.luu: 29-03-2021 log lai khi auto booking phi qua aither
        INSERT INTO AUTO_FEE_BOOKING_BATCH_LOG(AUTOID, FEETRAN_TXDATE, FEETRAN_TXNUM, TXNUM_1296, BUSDATE_1296, CUSTODYCD, FEECODE, BATCH_DATE)
        VALUES(SEQ_AUTO_FEE_BOOKING_BATCH_LOG.NEXTVAL, REC.POSTDATE, REC.TXNUM, L_TXMSG.TXNUM, V_CURRDATE, REC.CUSTODYCD, REC.FEECODE, GETCURRDATE);

        --20 POSTDATE
        l_txmsg.txfields ('20').defname   := 'POSTDATE';
        l_txmsg.txfields ('20').TYPE      := 'D';
        l_txmsg.txfields ('20').value     := rec.POSTDATE;
        --87 TXNUM
        l_txmsg.txfields ('87').defname   := 'TXNUM';
        l_txmsg.txfields ('87').TYPE      := 'C';
        l_txmsg.txfields ('87').value     := rec.TXNUM;
        --30 DESC
        l_txmsg.txfields ('30').defname   := 'DESC';
        l_txmsg.txfields ('30').TYPE      := 'C';
        l_txmsg.txfields ('30').value     := rec.DESCRIPTION;
        --88 DESC
        l_txmsg.txfields ('88').defname   := 'CUSTODYCD';
        l_txmsg.txfields ('88').TYPE      := 'C';
        l_txmsg.txfields ('88').value     := rec.CUSTODYCD;
        --22 FEECODE
        l_txmsg.txfields ('22').defname   := 'FEECODE';
        l_txmsg.txfields ('22').TYPE      := 'C';
        l_txmsg.txfields ('22').value     := rec.FEECODE;

        BEGIN
            IF TXPKS_#1296.FN_BATCHTXPROCESS(L_TXMSG, P_ERR_CODE, L_ERR_PARAM) <> SYSTEMNUMS.C_SUCCESS THEN
                plog.error (pkgctx, SQLERRM || dbms_utility.format_error_backtrace);
                
            END IF;
        END;
    END LOOP;
    PLOG.SETENDSECTION (PKGCTX, 'PRC_FEEBOOKINGRESULTAUTO');
    EXCEPTION WHEN OTHERS THEN
        P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
        PLOG.ERROR (PKGCTX, SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
        PLOG.SETENDSECTION (PKGCTX, 'PRC_FEEBOOKINGRESULTAUTO');
        RAISE ERRNUMS.E_SYSTEM_ERROR;
    END PRC_FEEBOOKINGRESULTAUTO;
END;
/
