SET DEFINE OFF;
CREATE OR REPLACE PACKAGE fopks_getnew IS

PROCEDURE PRC_GETSEARCH(P_REFCURSOR IN OUT PKG_REPORT.REF_CURSOR, P_SEARCHCODE IN VARCHAR2, P_ERR_CODE IN OUT VARCHAR2, P_ERR_PARAM IN OUT VARCHAR2);
PROCEDURE PRC_GETSEARCHFLD(P_REFCURSOR IN OUT PKG_REPORT.REF_CURSOR, P_SEARCHCODE IN VARCHAR2, P_ERR_CODE IN OUT VARCHAR2, P_ERR_PARAM IN OUT VARCHAR2);
PROCEDURE PRC_GETDATASEARCH(P_REFCURSOR IN OUT PKG_REPORT.REF_CURSOR, P_TLID IN VARCHAR2, P_ROLE IN VARCHAR2, P_LANGUAGE IN VARCHAR2, P_SEARCHCODE IN VARCHAR2, P_ERR_CODE IN OUT VARCHAR2, P_ERR_PARAM IN OUT VARCHAR2);
PROCEDURE PRC_GETDATASEARCH2(P_REFCURSOR IN OUT PKG_REPORT.REF_CURSOR, P_TLID IN VARCHAR2, P_ROLE IN VARCHAR2, P_LANGUAGE IN VARCHAR2, P_SEARCHCODE IN VARCHAR2, P_DATA IN VARCHAR2, P_ERR_CODE IN OUT VARCHAR2, P_ERR_PARAM IN OUT VARCHAR2);
PROCEDURE PRC_GETDATASEARCH_TOTAL(P_REFCURSOR IN OUT PKG_REPORT.REF_CURSOR, P_TLID IN VARCHAR2, P_ROLE IN VARCHAR2, P_LANGUAGE IN VARCHAR2, P_SEARCHCODE IN VARCHAR2, P_DATA IN VARCHAR2, P_ERR_CODE IN OUT VARCHAR2, P_ERR_PARAM IN OUT VARCHAR2);
PROCEDURE PRC_GETFLDMASTER(P_REFCURSOR IN OUT PKG_REPORT.REF_CURSOR, P_OBJNAME IN VARCHAR2, P_LANGUAGE IN VARCHAR2, P_ERR_CODE IN OUT VARCHAR2, P_ERR_PARAM IN OUT VARCHAR2);
PROCEDURE PRC_GETFLDVAL(P_REFCURSOR IN OUT PKG_REPORT.REF_CURSOR, P_OBJNAME IN VARCHAR2, P_LANGUAGE IN VARCHAR2, P_ERR_CODE IN OUT VARCHAR2, P_ERR_PARAM IN OUT VARCHAR2);
PROCEDURE PRC_GETDATATAGLIST(P_REFCURSOR IN OUT PKG_REPORT.REF_CURSOR, P_TLID IN VARCHAR2, P_ROLE IN VARCHAR2, P_LANGUAGE IN VARCHAR2, P_OBJNAME IN VARCHAR2, P_FLDNAME IN VARCHAR2, P_INPUTSRT IN VARCHAR2, P_OPTION IN VARCHAR2, P_ERR_CODE IN OUT VARCHAR2, P_ERR_PARAM IN OUT VARCHAR2);
PROCEDURE PRC_GET_EXECUTE_FXFLDVAL(P_REFCURSOR IN OUT PKG_REPORT.REF_CURSOR, P_OBJNAME IN VARCHAR2, P_FLDNAME IN VARCHAR2, P_DATA IN VARCHAR2, P_ERR_CODE IN OUT VARCHAR2, P_ERR_PARAM IN OUT VARCHAR2);
PROCEDURE PRC_GETRPTFIELDS(P_REFCURSOR IN OUT PKG_REPORT.REF_CURSOR, P_OBJNAME IN VARCHAR2, P_LANGUAGE IN VARCHAR2, P_ERR_CODE IN OUT VARCHAR2, P_ERR_PARAM IN OUT VARCHAR2);
PROCEDURE PRC_GETDATATAGLISTRPT(P_REFCURSOR IN OUT PKG_REPORT.REF_CURSOR, P_TLID IN VARCHAR2, P_ROLE IN VARCHAR2, P_LANGUAGE IN VARCHAR2, P_OBJNAME IN VARCHAR2, P_FLDNAME IN VARCHAR2, P_INPUTSRT IN VARCHAR2, P_OPTION IN VARCHAR2, P_ERR_CODE IN OUT VARCHAR2, P_ERR_PARAM IN OUT VARCHAR2);

END FOPKS_GETNEW;
/


CREATE OR REPLACE PACKAGE BODY fopks_getnew IS
-- PRIVATE VARIABLE DECLARATIONS
PKGCTX PLOG.LOG_CTX;
LOGROW TLOGDEBUG%ROWTYPE;

PROCEDURE PRC_GETSEARCH(P_REFCURSOR IN OUT PKG_REPORT.REF_CURSOR, P_SEARCHCODE IN VARCHAR2, P_ERR_CODE IN OUT VARCHAR2, P_ERR_PARAM IN OUT VARCHAR2) AS
BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'PRC_GETSEARCH');

    OPEN P_REFCURSOR FOR
    SELECT SEARCHCODE,SEARCHTITLE,EN_SEARCHTITLE,OBJNAME,ROWPERPAGE FROM SEARCH WHERE SEARCHCODE = P_SEARCHCODE;

    PLOG.SETENDSECTION(PKGCTX, 'PRC_GETSEARCH');
EXCEPTION WHEN OTHERS THEN
    P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
    PLOG.ERROR(PKGCTX,'ERR: ' || SQLERRM || ' TRACE: ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE );
    PLOG.SETENDSECTION(PKGCTX, 'PRC_GETSEARCH');
END PRC_GETSEARCH;

PROCEDURE PRC_GETSEARCHFLD(P_REFCURSOR IN OUT PKG_REPORT.REF_CURSOR, P_SEARCHCODE IN VARCHAR2, P_ERR_CODE IN OUT VARCHAR2, P_ERR_PARAM IN OUT VARCHAR2) AS
BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'PRC_GETSEARCHFLD');

    OPEN P_REFCURSOR FOR
    SELECT * FROM SEARCHFLD WHERE SEARCHCODE = P_SEARCHCODE ORDER BY POSITION;

    PLOG.SETENDSECTION(PKGCTX, 'PRC_GETSEARCHFLD');
EXCEPTION WHEN OTHERS THEN
    P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
    PLOG.ERROR(PKGCTX,'ERR: ' || SQLERRM || ' TRACE: ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE );
    PLOG.SETENDSECTION(PKGCTX, 'PRC_GETSEARCHFLD');
END PRC_GETSEARCHFLD;

PROCEDURE PRC_GETDATASEARCH(P_REFCURSOR IN OUT PKG_REPORT.REF_CURSOR, P_TLID IN VARCHAR2, P_ROLE IN VARCHAR2, P_LANGUAGE IN VARCHAR2, P_SEARCHCODE IN VARCHAR2, P_ERR_CODE IN OUT VARCHAR2, P_ERR_PARAM IN OUT VARCHAR2)
AS
    L_SQL VARCHAR2(4000);
BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'PRC_GETDATASEARCH');

    SELECT SEARCHCMDSQL INTO L_SQL FROM SEARCH WHERE SEARCHCODE = P_SEARCHCODE;

    IF UPPER(NVL(P_LANGUAGE, 'VIE')) = 'VIE' THEN
        L_SQL := REPLACE(L_SQL,'<@CDCONTENT>','CDCONTENT');
        L_SQL := REPLACE(L_SQL,'<@cdcontent>','CDCONTENT');
        L_SQL := REPLACE(L_SQL,'<@TXDESC>','TXDESC');
        L_SQL := REPLACE(L_SQL,'<@txdesc>','TXDESC');
    ELSE
        L_SQL := REPLACE(L_SQL,'<@CDCONTENT>','EN_CDCONTENT');
        L_SQL := REPLACE(L_SQL,'<@cdcontent>','EN_CDCONTENT');
        L_SQL := REPLACE(L_SQL,'<@TXDESC>','EN_TXDESC');
        L_SQL := REPLACE(L_SQL,'<@txdesc>','EN_TXDESC');
    END IF;
    --
    OPEN P_REFCURSOR FOR L_SQL;

    PLOG.SETENDSECTION(PKGCTX, 'PRC_GETDATASEARCH');
EXCEPTION WHEN OTHERS THEN
    P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
    PLOG.ERROR(PKGCTX,'ERR: ' || SQLERRM || ' TRACE: ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE );
    PLOG.SETENDSECTION(PKGCTX, 'PRC_GETDATASEARCH');
END PRC_GETDATASEARCH;

PROCEDURE PRC_GETDATASEARCH2(P_REFCURSOR IN OUT PKG_REPORT.REF_CURSOR, P_TLID IN VARCHAR2, P_ROLE IN VARCHAR2, P_LANGUAGE IN VARCHAR2, P_SEARCHCODE IN VARCHAR2, P_DATA IN VARCHAR2, P_ERR_CODE IN OUT VARCHAR2, P_ERR_PARAM IN OUT VARCHAR2)
AS
    L_SQL VARCHAR2(8000);
    L_WHERE VARCHAR2(2000);
    L_OFFSET NUMBER;
    L_TLID VARCHAR2(50);
    L_CURRDATE VARCHAR2(50);
BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'PRC_GETDATASEARCH2');
    L_SQL := '';
    L_WHERE := '';
    L_OFFSET := 0;

    SELECT SEARCHCMDSQL INTO L_SQL FROM SEARCH WHERE SEARCHCODE = P_SEARCHCODE;

    L_TLID := REPLACE(P_TLID,'''','''''');
    L_SQL := REPLACE(L_SQL,'<@TLID>', L_TLID);

    SELECT VARVALUE INTO L_CURRDATE
    FROM SYSVAR
    WHERE GRNAME = 'SYSTEM'
    AND VARNAME ='CURRDATE';

    L_SQL := REPLACE(L_SQL,'<@BUSDATE>', L_CURRDATE);

    IF UPPER(NVL(P_LANGUAGE, 'VIE')) = 'VIE' THEN
        L_SQL := REPLACE(L_SQL,'<@CDCONTENT>','CDCONTENT');
        L_SQL := REPLACE(L_SQL,'<@cdcontent>','CDCONTENT');
        L_SQL := REPLACE(L_SQL,'<@TXDESC>','TXDESC');
        L_SQL := REPLACE(L_SQL,'<@txdesc>','TXDESC');
    ELSE
        L_SQL := REPLACE(L_SQL,'<@CDCONTENT>','EN_CDCONTENT');
        L_SQL := REPLACE(L_SQL,'<@cdcontent>','EN_CDCONTENT');
        L_SQL := REPLACE(L_SQL,'<@TXDESC>','EN_TXDESC');
        L_SQL := REPLACE(L_SQL,'<@txdesc>','EN_TXDESC');
    END IF;

    L_SQL := 'SELECT DT.* FROM ( ' || L_SQL || ' ) DT ';

    FOR RECJS IN (
        SELECT REPLACE(JT.KEYVAL,'''','''''') KEYVAL
        FROM (SELECT P_DATA JSON FROM DUAL) DT, JSON_TABLE(
            DT.JSON, '$' COLUMNS (
                KEYVAL VARCHAR2(200)PATH '$.KEYVAL'
            )
        ) AS JT
        WHERE JT.KEYVAL IS NOT NULL
    ) LOOP
        L_SQL := REPLACE(L_SQL, '<@KEYVAL>', RECJS.KEYVAL);
    END LOOP;

    FOR RECJS1 IN (
        SELECT REPLACE(KEYNAME,'''','''''') KEYNAME, REPLACE(KEYVAL,'''','''''') KEYVAL
        FROM (
            SELECT NVL(P_DATA,'[]') JSON FROM DUAL
        ) DT,
        JSON_TABLE(
            DT.JSON, '$.keySearch[*]' COLUMNS (
                KEYNAME VARCHAR2(200)PATH '$.id',
                KEYVAL VARCHAR2(200)PATH '$.value'
            )
        ) AS JT
        WHERE KEYNAME IS NOT NULL
    ) LOOP
        L_WHERE := L_WHERE || ' UPPER(DT.' || RECJS1.KEYNAME || ') LIKE ''%'' || UPPER(''' || RECJS1.KEYVAL || ''') || ''%'' AND';
    END LOOP;

    FOR RECJS2 IN (
        SELECT REPLACE(KEYNAME,'''','''''') KEYNAME, REPLACE(KEYVAL,'''','''''') KEYVAL
        FROM (
            SELECT NVL(P_DATA,'[]') JSON FROM DUAL
        ) DT,
        JSON_TABLE(
            DT.JSON, '$.keyFilter[*]' COLUMNS (
                KEYNAME VARCHAR2(200)PATH '$.id',
                KEYVAL VARCHAR2(200)PATH '$.value'
            )
        ) AS JT
        WHERE KEYNAME IS NOT NULL
    ) LOOP
        IF NVL(RECJS2.KEYVAL, '___') <> '___' THEN
            IF RECJS2.KEYNAME = 'FRDATE' THEN
                L_WHERE := L_WHERE || ' TO_DATE(DT.' || RECJS2.KEYNAME || ', FN_SYSTEMNUMS(''SYSTEMNUMS.C_DATE_FORMAT'')) >= TO_DATE(''' || RECJS2.KEYVAL || ''', FN_SYSTEMNUMS(''SYSTEMNUMS.C_DATE_FORMAT'')) AND';
            ELSIF RECJS2.KEYNAME = 'TODATE' THEN
                L_WHERE := L_WHERE || ' TO_DATE(DT.' || RECJS2.KEYNAME || ', FN_SYSTEMNUMS(''SYSTEMNUMS.C_DATE_FORMAT'')) <= TO_DATE(''' || RECJS2.KEYVAL || ''', FN_SYSTEMNUMS(''SYSTEMNUMS.C_DATE_FORMAT'')) AND';
            ELSE
                L_WHERE := L_WHERE || ' UPPER(DT.' || RECJS2.KEYNAME || ') = UPPER(''' || RECJS2.KEYVAL || ''') AND';
            END IF;
        END IF;
    END LOOP;

    IF NVL(L_WHERE, '...') <> '...' THEN
        L_WHERE := SUBSTR(L_WHERE,0,LENGTH(L_WHERE) - 3);
        L_SQL := L_SQL || ' WHERE ' || L_WHERE;
    END IF;

    FOR RECJS2 IN (
        SELECT NVL(JT.PAGE,'0') PAGE, NVL(JT.PAGESIZE,'0') PAGESIZE
        FROM (
            SELECT NVL(P_DATA,'[]') JSON FROM DUAL
        ) DT,
        JSON_TABLE(
            DT.JSON, '$' COLUMNS (
                PAGE VARCHAR2(200)PATH '$.page',
                PAGESIZE VARCHAR2(200)PATH '$.pageSize'
            )
        ) AS JT
    ) LOOP
        IF TO_NUMBER(RECJS2.PAGE) <= 1 THEN
            L_OFFSET := 0;
        ELSE
            L_OFFSET := (TO_NUMBER(RECJS2.PAGE) - 1) * TO_NUMBER(RECJS2.PAGESIZE);
        END IF;
        L_SQL := 'SELECT DTL.* FROM ( ' || L_SQL || ' ) DTL OFFSET ' || L_OFFSET || ' ROWS FETCH NEXT ' || RECJS2.PAGESIZE || ' ROWS ONLY';
    END LOOP;

    --
    OPEN P_REFCURSOR FOR L_SQL;

    PLOG.SETENDSECTION(PKGCTX, 'PRC_GETDATASEARCH2');
EXCEPTION WHEN OTHERS THEN
    P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
    PLOG.ERROR(PKGCTX,'ERR: ' || SQLERRM || ' TRACE: ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE );
    PLOG.SETENDSECTION(PKGCTX, 'PRC_GETDATASEARCH2');
END PRC_GETDATASEARCH2;

PROCEDURE PRC_GETDATASEARCH_TOTAL(P_REFCURSOR IN OUT PKG_REPORT.REF_CURSOR, P_TLID IN VARCHAR2, P_ROLE IN VARCHAR2, P_LANGUAGE IN VARCHAR2, P_SEARCHCODE IN VARCHAR2, P_DATA IN VARCHAR2, P_ERR_CODE IN OUT VARCHAR2, P_ERR_PARAM IN OUT VARCHAR2)
AS
    L_SQL VARCHAR2(8000);
    L_WHERE VARCHAR2(2000);
    L_TLID VARCHAR2(50);
    L_CURRDATE VARCHAR2(50);
BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'PRC_GETDATASEARCH_TOTAL');
    

    SELECT SEARCHCMDSQL INTO L_SQL FROM SEARCH WHERE SEARCHCODE = P_SEARCHCODE;

    L_TLID := REPLACE(P_TLID,'''','''''');
    L_SQL := REPLACE(L_SQL,'<@TLID>', L_TLID);

    SELECT VARVALUE INTO L_CURRDATE
    FROM SYSVAR
    WHERE GRNAME = 'SYSTEM'
    AND VARNAME ='CURRDATE';

    L_SQL := REPLACE(L_SQL,'<@BUSDATE>', L_CURRDATE);

    IF UPPER(NVL(P_LANGUAGE, 'VIE')) = 'VIE' THEN
        L_SQL := REPLACE(L_SQL,'<@CDCONTENT>','CDCONTENT');
        L_SQL := REPLACE(L_SQL,'<@cdcontent>','CDCONTENT');
        L_SQL := REPLACE(L_SQL,'<@TXDESC>','TXDESC');
        L_SQL := REPLACE(L_SQL,'<@txdesc>','TXDESC');
    ELSE
        L_SQL := REPLACE(L_SQL,'<@CDCONTENT>','EN_CDCONTENT');
        L_SQL := REPLACE(L_SQL,'<@cdcontent>','EN_CDCONTENT');
        L_SQL := REPLACE(L_SQL,'<@TXDESC>','EN_TXDESC');
        L_SQL := REPLACE(L_SQL,'<@txdesc>','EN_TXDESC');
    END IF;

    L_SQL := 'SELECT DT.* FROM ( ' || L_SQL || ' ) DT ';

    FOR RECJS IN (
        SELECT REPLACE(JT.KEYVAL,'''','''''') KEYVAL
        FROM (SELECT P_DATA JSON FROM DUAL) DT, JSON_TABLE(
            DT.JSON, '$' COLUMNS (
                KEYVAL VARCHAR2(200)PATH '$.KEYVAL'
            )
        ) AS JT
        WHERE JT.KEYVAL IS NOT NULL
    ) LOOP
        L_SQL := REPLACE(L_SQL, '<@KEYVAL>', RECJS.KEYVAL);
    END LOOP;

    FOR RECJS1 IN (
        SELECT KEYNAME, KEYVAL
        FROM (
            SELECT NVL(P_DATA,'[]') JSON FROM DUAL
        ) DT,
        JSON_TABLE(
            DT.JSON, '$.keySearch[*]' COLUMNS (
                KEYNAME VARCHAR2(200)PATH '$.id',
                KEYVAL VARCHAR2(200)PATH '$.value'
            )
        ) AS JT
        WHERE KEYNAME IS NOT NULL
    ) LOOP
        L_WHERE := L_WHERE || ' UPPER(DT.' || REPLACE(RECJS1.KEYNAME,'''','''''') || ') LIKE ''%'' || UPPER(''' || REPLACE(RECJS1.KEYVAL,'''','''''') || ''') || ''%'' AND';
    END LOOP;

    FOR RECJS2 IN (
        SELECT REPLACE(KEYNAME,'''','''''') KEYNAME, REPLACE(KEYVAL,'''','''''') KEYVAL
        FROM (
            SELECT NVL(P_DATA,'[]') JSON FROM DUAL
        ) DT,
        JSON_TABLE(
            DT.JSON, '$.keyFilter[*]' COLUMNS (
                KEYNAME VARCHAR2(200)PATH '$.id',
                KEYVAL VARCHAR2(200)PATH '$.value'
            )
        ) AS JT
        WHERE KEYNAME IS NOT NULL
    ) LOOP
        IF NVL(RECJS2.KEYVAL, '___') <> '___' THEN
            IF RECJS2.KEYNAME = 'FRDATE' THEN
                L_WHERE := L_WHERE || ' TO_DATE(DT.' || RECJS2.KEYNAME || ', FN_SYSTEMNUMS(''SYSTEMNUMS.C_DATE_FORMAT'')) >= TO_DATE(''' || RECJS2.KEYVAL || ''', FN_SYSTEMNUMS(''SYSTEMNUMS.C_DATE_FORMAT'')) AND';
            ELSIF RECJS2.KEYNAME = 'TODATE' THEN
                L_WHERE := L_WHERE || ' TO_DATE(DT.' || RECJS2.KEYNAME || ', FN_SYSTEMNUMS(''SYSTEMNUMS.C_DATE_FORMAT'')) <= TO_DATE(''' || RECJS2.KEYVAL || ''', FN_SYSTEMNUMS(''SYSTEMNUMS.C_DATE_FORMAT'')) AND';
            ELSE
                L_WHERE := L_WHERE || ' UPPER(DT.' || RECJS2.KEYNAME || ') = UPPER(''' || RECJS2.KEYVAL || ''') AND';
            END IF;
        END IF;
    END LOOP;

    IF NVL(L_WHERE, '...') <> '...' THEN
        L_WHERE := SUBSTR(L_WHERE,0,LENGTH(L_WHERE) - 3);
        L_SQL := L_SQL || ' WHERE ' || L_WHERE;
    END IF;

    L_SQL := 'SELECT COUNT(1) TOTAL FROM ( ' || L_SQL || ' )';
    --
    OPEN P_REFCURSOR FOR L_SQL;

    PLOG.SETENDSECTION(PKGCTX, 'PRC_GETDATASEARCH_TOTAL');
EXCEPTION WHEN OTHERS THEN
    P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
    PLOG.ERROR(PKGCTX,'ERR: ' || SQLERRM || ' TRACE: ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE );
    PLOG.SETENDSECTION(PKGCTX, 'PRC_GETDATASEARCH_TOTAL');
END PRC_GETDATASEARCH_TOTAL;

PROCEDURE PRC_GETFLDMASTER(P_REFCURSOR IN OUT PKG_REPORT.REF_CURSOR, P_OBJNAME IN VARCHAR2, P_LANGUAGE IN VARCHAR2, P_ERR_CODE IN OUT VARCHAR2, P_ERR_PARAM IN OUT VARCHAR2)
AS
    L_SQL VARCHAR2(4000);
    L_CURRDATE VARCHAR2(50);
BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'PRC_GETFLDMASTER');

    SELECT VARVALUE INTO L_CURRDATE
    FROM SYSVAR
    WHERE GRNAME = 'SYSTEM'
    AND VARNAME ='CURRDATE';

    OPEN P_REFCURSOR FOR
    SELECT F.FLDNAME, F.OBJNAME, F.CAPTION, F.EN_CAPTION, F.FLDLEN, F.FLDWIDTH, REPLACE(F.DEFVAL,'<@BUSDATE>',L_CURRDATE) DEFVAL, F.VISIBLE, F.DISABLE, F.RISKFLD, F.MANDATORY, F.CTLTYPE, F.GRNAME, F.LOOKUP,
           F.TAGFIELD, F.TAGVALUE, F.LOOKUPNAME, F.PDEFVAL, F.FLDRND DECIMALSCALE, F.FLDMASK, F.PRINTINFO, F.UPPERCASE, F.PDEFNAME, F.DATATYPE,
           (CASE WHEN NVL(F.LLIST,'') = '' THEN NULL ELSE FN_EXECUTESQL2JSON(F.LLIST, P_LANGUAGE) END) DTOT
    FROM FLDMASTER_WEB F
    WHERE F.OBJNAME = P_OBJNAME
    ORDER BY F.GRNAME, F.ODRNUM;

    PLOG.SETENDSECTION(PKGCTX, 'PRC_GETFLDMASTER');
EXCEPTION WHEN OTHERS THEN
    P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
    PLOG.ERROR(PKGCTX,'ERR: ' || SQLERRM || ' TRACE: ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE );
    PLOG.SETENDSECTION(PKGCTX, 'PRC_GETFLDMASTER');
END PRC_GETFLDMASTER;

PROCEDURE PRC_GETFLDVAL(P_REFCURSOR IN OUT PKG_REPORT.REF_CURSOR, P_OBJNAME IN VARCHAR2, P_LANGUAGE IN VARCHAR2, P_ERR_CODE IN OUT VARCHAR2, P_ERR_PARAM IN OUT VARCHAR2)
AS
    L_SQL VARCHAR2(4000);
BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'PRC_GETFLDVAL');
    OPEN P_REFCURSOR FOR
    SELECT *
    FROM FLDVAL_WEB F
    WHERE F.OBJNAME = P_OBJNAME
    ORDER BY F.ODRNUM;

    PLOG.SETENDSECTION(PKGCTX, 'PRC_GETFLDVAL');
EXCEPTION WHEN OTHERS THEN
    P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
    PLOG.ERROR(PKGCTX,'ERR: ' || SQLERRM || ' TRACE: ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE );
    PLOG.SETENDSECTION(PKGCTX, 'PRC_GETFLDVAL');
END PRC_GETFLDVAL;

PROCEDURE PRC_GET_EXECUTE_FXFLDVAL(P_REFCURSOR IN OUT PKG_REPORT.REF_CURSOR,
                                   P_OBJNAME IN VARCHAR2,
                                   P_FLDNAME IN VARCHAR2,
                                   P_DATA IN VARCHAR2,
                                   P_ERR_CODE IN OUT VARCHAR2, P_ERR_PARAM IN OUT VARCHAR2)
AS
    L_FN VARCHAR(500);
    L_SQL VARCHAR(500);
    L_RESULT VARCHAR(500);
BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'PRC_GET_EXECUTE_FXFLDVAL');

    BEGIN
        SELECT VALEXP INTO L_FN FROM FLDVAL_WEB WHERE OBJNAME = UPPER(P_OBJNAME) AND FLDNAME = UPPER(P_FLDNAME) AND OPERATOR = 'FX' AND ROWNUM = 1;
    EXCEPTION WHEN OTHERS THEN
        OPEN P_REFCURSOR FOR SELECT '' DT_RESULT FROM DUAL;
        RETURN;
    END;

    L_SQL := 'SELECT ' || L_FN || '(:P_DATA) DT_RESULT FROM DUAL';
    EXECUTE IMMEDIATE L_SQL INTO L_RESULT USING P_DATA;

    OPEN P_REFCURSOR FOR SELECT L_RESULT DT_RESULT FROM DUAL;

    PLOG.SETENDSECTION(PKGCTX, 'PRC_GETFLDVAL');
EXCEPTION WHEN OTHERS THEN
    OPEN P_REFCURSOR FOR SELECT '' DT_RESULT FROM DUAL;
    PLOG.ERROR(PKGCTX,'ERR: ' || SQLERRM || ' TRACE: ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE );
    PLOG.SETENDSECTION(PKGCTX, 'PRC_GET_EXECUTE_FXFLDVAL');
END PRC_GET_EXECUTE_FXFLDVAL;

PROCEDURE PRC_GETDATATAGLIST(P_REFCURSOR IN OUT PKG_REPORT.REF_CURSOR,
          P_TLID IN VARCHAR2, P_ROLE IN VARCHAR2, P_LANGUAGE IN VARCHAR2,
          P_OBJNAME IN VARCHAR2, P_FLDNAME IN VARCHAR2, P_INPUTSRT IN VARCHAR2, P_OPTION IN VARCHAR2,
          P_ERR_CODE IN OUT VARCHAR2, P_ERR_PARAM IN OUT VARCHAR2)
AS
    L_SQL VARCHAR2(4000);
    L_SQLCHK VARCHAR2(4000);
    L_COUNT NUMBER;
    L_INPUTSRT VARCHAR2(500);
    L_TLID VARCHAR2(50);
    L_CURRDATE VARCHAR2(50);
BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'PRC_GETDATATAGLIST');
    L_INPUTSRT := REPLACE(P_INPUTSRT,'''','''''');
    SELECT TAGLIST INTO L_SQL FROM FLDMASTER_WEB WHERE OBJNAME = P_OBJNAME AND FLDNAME = P_FLDNAME;

    IF UPPER(NVL(P_LANGUAGE, 'VIE')) = 'VIE' THEN
        L_SQL := REPLACE(L_SQL,'<@CDCONTENT>','CDCONTENT');
        L_SQL := REPLACE(L_SQL,'<@TXDESC>','TXDESC');
    ELSE
        L_SQL := REPLACE(L_SQL,'<@CDCONTENT>','EN_CDCONTENT');
        L_SQL := REPLACE(L_SQL,'<@TXDESC>','EN_TXDESC');
    END IF;

    L_TLID := REPLACE(P_TLID,'''','''''');
    L_SQL := REPLACE(L_SQL,'<@TLID>', L_TLID);

    SELECT VARVALUE INTO L_CURRDATE
    FROM SYSVAR
    WHERE GRNAME = 'SYSTEM'
    AND VARNAME ='CURRDATE';

    L_SQL := REPLACE(L_SQL,'<@BUSDATE>', L_CURRDATE);

    FOR RECJS IN (
        SELECT REPLACE(JT.KEYVAL, '''','''''') KEYVAL
        FROM (
            SELECT NVL(P_OPTION,'[]') JSON FROM DUAL
        ) DT,
        JSON_TABLE(
            DT.JSON, '$' COLUMNS (
                KEYVAL VARCHAR2(200)PATH '$.KEYVAL'
            )
        ) AS JT
    ) LOOP
        L_SQL := REPLACE(L_SQL,'<@KEYVAL>', RECJS.KEYVAL);
    END LOOP;

    FOR RECJS1 IN (
        SELECT REPLACE(KEYNAME,'''','''''') KEYNAME, REPLACE(KEYVAL,'''','''''') KEYVAL
        FROM (
            SELECT NVL(P_OPTION,'[]') JSON FROM DUAL
        ) DT,
        JSON_TABLE(
            DT.JSON, '$.KEYVALARR[*]' COLUMNS (
                KEYNAME VARCHAR2(200)PATH '$.name',
                KEYVAL VARCHAR2(200)PATH '$.value'
            )
        ) AS JT
        WHERE KEYNAME IS NOT NULL
    ) LOOP
        L_SQL := REPLACE(L_SQL,'<@' || RECJS1.KEYNAME || '>', RECJS1.KEYVAL);
    END LOOP;

    L_SQLCHK := 'SELECT COUNT(1) FROM ( ' || L_SQL || ' ) DT WHERE UPPER(DT.VALUE) = UPPER(''' || L_INPUTSRT || ''')';
    
    EXECUTE IMMEDIATE L_SQLCHK INTO L_COUNT;

    IF L_COUNT > 0 THEN
        L_SQL := 'SELECT DT.* FROM
        (
            SELECT DT1.* FROM ( ' || L_SQL || ' ) DT1 WHERE UPPER(DT1.VALUE) = UPPER(''' || L_INPUTSRT || ''')
            UNION ALL
            SELECT DT2.* FROM ( ' || L_SQL || ' ) DT2 WHERE UPPER(DT2.VALUE) LIKE UPPER(''' || (CASE WHEN UPPER(L_INPUTSRT) = 'ALL' THEN '' ELSE SUBSTR(L_INPUTSRT,0,1) END) || ''') ||''%'' AND UPPER(DT2.VALUE) NOT IN (''' || L_INPUTSRT || ''')
        ) DT WHERE ROWNUM < 20';
    ELSE
        L_SQL := 'SELECT * FROM ( ' || L_SQL || ' ) DT WHERE UPPER(DT.LABEL) LIKE ''%'' || UPPER(''' || L_INPUTSRT || ''') ||''%'' AND ROWNUM < 20';
    END IF;
    
    OPEN P_REFCURSOR FOR L_SQL;

    PLOG.SETENDSECTION(PKGCTX, 'PRC_GETDATATAGLIST');
EXCEPTION WHEN OTHERS THEN
    P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
    PLOG.ERROR(PKGCTX,'ERR: ' || SQLERRM || ' TRACE: ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE );
    PLOG.SETENDSECTION(PKGCTX, 'PRC_GETDATATAGLIST');
END PRC_GETDATATAGLIST;

PROCEDURE PRC_GETRPTFIELDS(P_REFCURSOR IN OUT PKG_REPORT.REF_CURSOR, P_OBJNAME IN VARCHAR2, P_LANGUAGE IN VARCHAR2, P_ERR_CODE IN OUT VARCHAR2, P_ERR_PARAM IN OUT VARCHAR2)
AS
    L_SQL VARCHAR2(4000);
    L_CURRDATE VARCHAR2(50);
BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'PRC_GETRPTFIELDS');

    SELECT VARVALUE INTO L_CURRDATE
    FROM SYSVAR
    WHERE GRNAME = 'SYSTEM'
    AND VARNAME ='CURRDATE';

    OPEN P_REFCURSOR FOR
    SELECT F.FLDNAME, F.OBJNAME, F.CAPTION, F.EN_CAPTION, F.FLDLEN, 0 FLDWIDTH, REPLACE(F.DEFVAL,'<@BUSDATE>',L_CURRDATE) DEFVAL, F.VISIBLE, F.DISABLE, F.MANDATORY, F.CTLTYPE, F.LOOKUP, F.TAGFIELD, F.TAGVALUE,
           F.LOOKUPNAME, F.FLDMASK, F.PRINTINFO,
           (CASE WHEN NVL(F.LLIST,'') = '' THEN NULL ELSE FN_EXECUTESQL2JSON(F.LLIST, P_LANGUAGE) END) DTOT
    FROM RPTFIELDS_WEB F
    WHERE F.OBJNAME = P_OBJNAME
    ORDER BY F.ODRNUM;

    PLOG.SETENDSECTION(PKGCTX, 'PRC_GETRPTFIELDS');
EXCEPTION WHEN OTHERS THEN
    P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
    PLOG.ERROR(PKGCTX,'ERR: ' || SQLERRM || ' TRACE: ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE );
    PLOG.SETENDSECTION(PKGCTX, 'PRC_GETRPTFIELDS');
END PRC_GETRPTFIELDS;

PROCEDURE PRC_GETDATATAGLISTRPT(P_REFCURSOR IN OUT PKG_REPORT.REF_CURSOR,
          P_TLID IN VARCHAR2, P_ROLE IN VARCHAR2, P_LANGUAGE IN VARCHAR2,
          P_OBJNAME IN VARCHAR2, P_FLDNAME IN VARCHAR2, P_INPUTSRT IN VARCHAR2, P_OPTION IN VARCHAR2,
          P_ERR_CODE IN OUT VARCHAR2, P_ERR_PARAM IN OUT VARCHAR2)
AS
    L_SQL VARCHAR2(4000);
    L_SQLCHK VARCHAR2(4000);
    L_COUNT NUMBER;
    L_INPUTSRT VARCHAR2(500);
    L_TLID VARCHAR2(50);
    L_CURRDATE VARCHAR2(50);
BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'PRC_GETDATATAGLISTRPT');
    L_INPUTSRT := REPLACE(P_INPUTSRT,'''','''''');
    SELECT TAGLIST INTO L_SQL FROM RPTFIELDS_WEB WHERE OBJNAME = P_OBJNAME AND FLDNAME = P_FLDNAME;

    IF UPPER(NVL(P_LANGUAGE, 'VIE')) = 'VIE' THEN
        L_SQL := REPLACE(L_SQL,'<@CDCONTENT>','CDCONTENT');
        L_SQL := REPLACE(L_SQL,'<@TXDESC>','TXDESC');
    ELSE
        L_SQL := REPLACE(L_SQL,'<@CDCONTENT>','EN_CDCONTENT');
        L_SQL := REPLACE(L_SQL,'<@TXDESC>','EN_TXDESC');
    END IF;

    L_TLID := REPLACE(P_TLID,'''','''''');
    L_SQL := REPLACE(L_SQL,'<@TLID>', L_TLID);

    SELECT VARVALUE INTO L_CURRDATE
    FROM SYSVAR
    WHERE GRNAME = 'SYSTEM'
    AND VARNAME ='CURRDATE';

    L_SQL := REPLACE(L_SQL,'<@BUSDATE>', L_CURRDATE);

    FOR RECJS IN (
        SELECT REPLACE(JT.KEYVAL, '''','''''') KEYVAL
        FROM (
            SELECT NVL(P_OPTION,'[]') JSON FROM DUAL
        ) DT,
        JSON_TABLE(
            DT.JSON, '$' COLUMNS (
                KEYVAL VARCHAR2(200)PATH '$.KEYVAL'
            )
        ) AS JT
    ) LOOP
        L_SQL := REPLACE(L_SQL,'<@KEYVAL>', RECJS.KEYVAL);
    END LOOP;

    FOR RECJS1 IN (
        SELECT REPLACE(KEYNAME,'''','''''') KEYNAME, REPLACE(KEYVAL,'''','''''') KEYVAL
        FROM (
            SELECT NVL(P_OPTION,'[]') JSON FROM DUAL
        ) DT,
        JSON_TABLE(
            DT.JSON, '$.KEYVALARR[*]' COLUMNS (
                KEYNAME VARCHAR2(200)PATH '$.name',
                KEYVAL VARCHAR2(200)PATH '$.value'
            )
        ) AS JT
        WHERE KEYNAME IS NOT NULL
    ) LOOP
        L_SQL := REPLACE(L_SQL,'<@' || RECJS1.KEYNAME || '>', RECJS1.KEYVAL);
    END LOOP;

    L_SQLCHK := 'SELECT COUNT(1) FROM ( ' || L_SQL || ' ) DT WHERE UPPER(DT.VALUE) = UPPER(''' || L_INPUTSRT || ''')';
    
    EXECUTE IMMEDIATE L_SQLCHK INTO L_COUNT;

    IF L_COUNT > 0 THEN
        L_SQL := 'SELECT DT.* FROM
        (
            SELECT DT1.* FROM ( ' || L_SQL || ' ) DT1 WHERE UPPER(DT1.VALUE) = UPPER(''' || L_INPUTSRT || ''')
            UNION ALL
            SELECT DT2.* FROM ( ' || L_SQL || ' ) DT2 WHERE UPPER(DT2.VALUE) LIKE UPPER(''' || (CASE WHEN UPPER(L_INPUTSRT) = 'ALL' THEN '' ELSE SUBSTR(L_INPUTSRT,0,1) END) || ''') ||''%'' AND UPPER(DT2.VALUE) NOT IN (''' || L_INPUTSRT || ''')
        ) DT WHERE ROWNUM < 20';
    ELSE
        L_SQL := 'SELECT * FROM ( ' || L_SQL || ' ) DT WHERE UPPER(DT.LABEL) LIKE ''%'' || UPPER(''' || L_INPUTSRT || ''') ||''%'' AND ROWNUM < 20';
    END IF;
    
    OPEN P_REFCURSOR FOR L_SQL;

    PLOG.SETENDSECTION(PKGCTX, 'PRC_GETDATATAGLISTRPT');
EXCEPTION WHEN OTHERS THEN
    P_ERR_CODE := ERRNUMS.C_SYSTEM_ERROR;
    PLOG.ERROR(PKGCTX,'ERR: ' || SQLERRM || ' TRACE: ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE );
    PLOG.SETENDSECTION(PKGCTX, 'PRC_GETDATATAGLISTRPT');
END PRC_GETDATATAGLISTRPT;

BEGIN
-- INITIALIZATION
FOR I IN (SELECT * FROM TLOGDEBUG)
LOOP
LOGROW.LOGLEVEL  := I.LOGLEVEL;
LOGROW.LOG4TABLE := I.LOG4TABLE;
LOGROW.LOG4ALERT := I.LOG4ALERT;
LOGROW.LOG4TRACE := I.LOG4TRACE;
END LOOP;

PKGCTX := PLOG.INIT('FOPKS_GETNEW',
                  PLEVEL     => NVL(LOGROW.LOGLEVEL, 30),
                  PLOGTABLE  => (NVL(LOGROW.LOG4TABLE, 'N') = 'Y'),
                  PALERT     => (NVL(LOGROW.LOG4ALERT, 'N') = 'Y'),
                  PTRACE     => (NVL(LOGROW.LOG4TRACE, 'N') = 'Y'));

END FOPKS_GETNEW;
/
