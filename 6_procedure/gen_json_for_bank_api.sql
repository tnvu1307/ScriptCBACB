SET DEFINE OFF;
CREATE OR REPLACE
PROCEDURE gen_json_for_bank_api
IS
    PKGCTX   PLOG.LOG_CTX;
    CONST_FORMATDATE CONSTANT VARCHAR2(10) := 'RRRR-MM-DD';
    V_JSON VARCHAR2(4000);
    V_AUTOID_TXMAPSCHEMA NUMBER;
    V_URL_COREBANK VARCHAR2(200);
    V_TOKEN VARCHAR2(1000);
    V_METHODS VARCHAR2(50);
BEGIN
    PLOG.SETBEGINSECTION (PKGCTX, 'GEN_JSON_FOR_BANK_API');
    FOR REC_CRBTXREQ IN (SELECT * FROM CRBTXREQ WHERE STATUS = 'P' AND objname IN ('6690','6691'))
    LOOP
        V_JSON := '{';

        SELECT AUTOID, URL_COREBANK, METHODS
        INTO V_AUTOID_TXMAPSCHEMA, V_URL_COREBANK, V_METHODS
        FROM TXMAPSCHEMA
        WHERE FROBJ = REC_CRBTXREQ.OBJNAME
        AND REFCODE = REC_CRBTXREQ.TRFCODE
        AND REQRESTYPE = 'S';

        IF REC_CRBTXREQ.TLID NOT IN ('0000', '0001') THEN
            SELECT EXCHANGETOKEN INTO V_TOKEN FROM TLPROFILES WHERE TLID = REC_CRBTXREQ.TLID;
        END IF;

        FOR REC_FLMSGMAP IN (
            SELECT M.*, NVL(CRB.CVAL, CRB.NVAL) VALUE
            FROM
            (
                SELECT * FROM FLMSGMAP WHERE REFAUTOID = V_AUTOID_TXMAPSCHEMA AND ISSUBHEADER IS NULL ORDER BY AUTOID
            ) M
            LEFT JOIN (
                SELECT REQID, FLDNAME, CVAL, NULL NVAL
                FROM (
                    SELECT REQID,OBJTYPE,OBJNAME,TRFCODE,REQCODE,
                           OBJKEY,TO_CHAR(TXDATE,CONST_FORMATDATE) TXDATE,BANKCODE,BANKACCT,AFACCTNO,
                           TO_CHAR(TXAMT) TXAMT,NOTES,STATUS,REFTXNUM,TO_CHAR(REFTXDATE,CONST_FORMATDATE) REFTXDATE,
                           REFVAL,TO_CHAR(AFFECTDATE,CONST_FORMATDATE) AFFECTDATE,ERRORCODE,TO_CHAR(CREATEDATE,CONST_FORMATDATE) CREATEDATE,GRPREQID,
                           VIA,RBANKACCOUNT,RBANKNAME,RBANKCITAD,RBANKACCNAME,
                           TRNREF,ERRORDESC,PSTATUS,UNHOLD,REPVAL,
                           CURRENCY,REQTXNUM,DORC,TO_CHAR(FEEAMT) FEEAMT,TO_CHAR(TAXAMT) TAXAMT,
                           FEECODE,FEETYPE,TO_CHAR(EXCHANGERATE) EXCHANGERATE,TO_CHAR(EXCHANGEVALUE) EXCHANGEVALUE,TOCURRENCY,
                           FEENAME,BRANCH,TO_CHAR(BUSDATE,CONST_FORMATDATE) BUSDATE,DESBANKACCOUNT,TRN_DT
                    FROM CRBTXREQ
                )
                UNPIVOT (
                  CVAL FOR FLDNAME IN (
                        OBJTYPE,OBJNAME,TRFCODE,REQCODE,OBJKEY,
                        TXDATE,BANKCODE,BANKACCT,AFACCTNO,TXAMT,
                        NOTES,STATUS,REFTXNUM,REFTXDATE,REFVAL,
                        AFFECTDATE,ERRORCODE,CREATEDATE,GRPREQID,VIA,
                        RBANKACCOUNT,RBANKNAME,RBANKCITAD,RBANKACCNAME,TRNREF,
                        ERRORDESC,PSTATUS,UNHOLD,REPVAL,CURRENCY,
                        REQTXNUM,DORC,FEEAMT,TAXAMT,FEECODE,
                        FEETYPE,EXCHANGERATE,EXCHANGEVALUE,TOCURRENCY,FEENAME,
                        BRANCH,BUSDATE,DESBANKACCOUNT,TRN_DT
                    )
                ) U
                WHERE REQID = REC_CRBTXREQ.REQID

                UNION ALL

                SELECT REQID, FLDNAME, CVAL, NVAL FROM CRBTXREQDTL WHERE REQID = REC_CRBTXREQ.REQID
            ) CRB ON CRB.FLDNAME = M.FRFIELD)
        LOOP
            IF REC_FLMSGMAP.ISSUBVAL = 'N' THEN
                IF REC_FLMSGMAP.VALUE IS NOT NULL
                THEN
                    IF REC_FLMSGMAP.VALUETYPE = 'C'
                    THEN
                        V_JSON := V_JSON || '"' || REC_FLMSGMAP.TOFIELD || '":' || '"' || TRANSFORM_PARAMETER_JSON(REC_FLMSGMAP.VALUE) ||'",';
                    ELSE
                        V_JSON := V_JSON || '"' || REC_FLMSGMAP.TOFIELD || '":' || TRANSFORM_PARAMETER_JSON(REC_FLMSGMAP.VALUE) ||',';
                    END IF;
                ELSE
                    V_JSON := V_JSON || '"' || REC_FLMSGMAP.TOFIELD || '":"' || REC_FLMSGMAP.DEFAULTVALUE ||'",';
                END IF;
            ELSE
                V_JSON := V_JSON || '"' || REC_FLMSGMAP.TOFIELD || '":' || FN_GET_FLMSGMAP_SUBVAL(REC_CRBTXREQ.REQID, REC_FLMSGMAP.REFAUTOID, REC_FLMSGMAP.TOFIELD) || ',';
            END IF;
        END LOOP;

        V_JSON := V_JSON || '}';
        V_JSON := REPLACE(V_JSON,',}','}');
        V_JSON := TRANSFORM_JSON(V_JSON);

        --INSTER VAO TABLE FLMSGJSON
        IF REC_CRBTXREQ.TLID NOT IN ('0000', '0001') AND NVL(LENGTH(V_TOKEN), 0) = 0 THEN
            UPDATE CRBTXREQ SET STATUS = 'E', ERRORDESC = 'EXCHANGE TOKEN NOT FOUND.' WHERE REQID = REC_CRBTXREQ.REQID;
        ELSE
            INSERT INTO FLMSGJSON (REQID, BODY, API, TLID, TOKEN, METHODS)
            VALUES (REC_CRBTXREQ.REQID, V_JSON, V_URL_COREBANK, REC_CRBTXREQ.TLID, V_TOKEN, V_METHODS);

            UPDATE CRBTXREQ SET STATUS = 'W' WHERE REQID = REC_CRBTXREQ.REQID;
        END IF;
    END LOOP;
    PLOG.SETENDSECTION(PKGCTX, 'GEN_JSON_FOR_BANK_API');
EXCEPTION WHEN OTHERS THEN
    PLOG.ERROR (PKGCTX, SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
END;
/
