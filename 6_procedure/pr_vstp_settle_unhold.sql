SET DEFINE OFF;
CREATE OR REPLACE PROCEDURE pr_vstp_settle_unhold
IS
    P_ERR_CODE VARCHAR2(250);
    L_VERSION VARCHAR2(50);
    L_HOLDBALACE NUMBER;
    L_UNHOLDBALACE NUMBER;
    L_COUNT NUMBER;
    L_ERRMSG VARCHAR2(500);
    L_REQUESTKEY VARCHAR2(100);
BEGIN


    FOR REC IN (
        SELECT *
        FROM
        (
            SELECT VLOG.CUSTODYCD, VLOG.DDACCTNO, VLOG.MEMBERID, DD.REFCASAACCT, MIN(VLOG.AUTOID) AUTOID, SUM(AMT) AMOUNT
            FROM VSTP_SETTLE_LOG VLOG, DDMAST DD
            WHERE VLOG.STATUS = '0'
            AND VLOG.DDACCTNO = DD.ACCTNO
            AND VLOG.PROCESS <= 3
            GROUP BY VLOG.CUSTODYCD, VLOG.DDACCTNO, VLOG.MEMBERID, DD.REFCASAACCT
            ORDER BY MIN(VLOG.AUTOID)
        ) WHERE ROWNUM < 10
    )
    LOOP
        SELECT VERSION INTO L_VERSION FROM VSTP_SETTLE_LOG WHERE AUTOID = REC.AUTOID;

        --update version xu ly chung
        UPDATE VSTP_SETTLE_LOG
        SET VERSION = L_VERSION
        WHERE CUSTODYCD = REC.CUSTODYCD
        AND DDACCTNO = REC.DDACCTNO
        AND MEMBERID = REC.MEMBERID
        AND STATUS = '0';

        --co xu ly dang unhold, dang cat tien, dang hold thi khong unhold
        SELECT COUNT(1) INTO L_COUNT FROM VSTP_SETTLE_LOG WHERE CUSTODYCD = REC.CUSTODYCD AND DDACCTNO = REC.DDACCTNO AND MEMBERID = REC.MEMBERID AND STATUS IN ('1','2','2.2','3');
        IF L_COUNT > 0 THEN
            CONTINUE;
        END IF;

        --dang co xu ly cat tien thi di cat luon khong unhold nua
        SELECT COUNT(1) INTO L_COUNT FROM VSTP_SETTLE_LOG WHERE CUSTODYCD = REC.CUSTODYCD AND DDACCTNO = REC.DDACCTNO AND MEMBERID = REC.MEMBERID AND STATUS IN ('2');
        IF L_COUNT > 0 THEN
            SELECT MIN(BEFOR_HOLD) INTO L_HOLDBALACE FROM VSTP_SETTLE_LOG WHERE CUSTODYCD = REC.CUSTODYCD AND DDACCTNO = REC.DDACCTNO AND MEMBERID = REC.MEMBERID AND STATUS IN ('2');

            UPDATE VSTP_SETTLE_LOG
            SET STATUS = '1.1', PSTATUS = STATUS, BEFOR_HOLD = L_HOLDBALACE, VERSION = L_VERSION, LASTCHANGE = SYSTIMESTAMP
            WHERE CUSTODYCD = REC.CUSTODYCD
            AND DDACCTNO = REC.DDACCTNO
            AND MEMBERID = REC.MEMBERID;

            CONTINUE;
        END IF;

        --unhold all
        L_HOLDBALACE := 0;
        FOR REC2 IN (
            SELECT R.REQID, R.REQTXNUM, L.MSGACCT, L.MSGAMT
            FROM
            (SELECT * FROM CRBTXREQ WHERE TRFCODE = 'HOLD' AND REQCODE = 'BANKHOLDEDBYBROKERTPRL' AND STATUS = 'C' AND UNHOLD = 'N') R,
            (SELECT * FROM TLLOG WHERE TLTXCD = '6690') L,
            (
                SELECT TXNUM, TXDATE,
                MAX (CASE WHEN F.FLDCD = '05' THEN F.CVALUE ELSE '' END) MEMBERID,
                MAX (CASE WHEN F.FLDCD = '88' THEN F.CVALUE ELSE '' END) CUSTODYCD,
                MAX (CASE WHEN F.FLDCD = '93' THEN F.CVALUE ELSE '' END) BANKACCTNO,
                MAX (CASE WHEN F.FLDCD = '30' THEN F.CVALUE ELSE '' END) NOTE
                FROM TLLOGFLD F
                WHERE FLDCD IN ('05', '88', '93', '30')
                GROUP BY TXNUM, TXDATE
            ) F
            WHERE L.TXNUM = F.TXNUM AND L.TXDATE = F.TXDATE
            AND R.OBJNAME = L.TLTXCD
            AND R.OBJKEY = L.TXNUM
            AND R.TXDATE = L.TXDATE
            AND F.MEMBERID = REC.MEMBERID
            AND F.CUSTODYCD = REC.CUSTODYCD
            AND F.BANKACCTNO = REC.REFCASAACCT
        ) LOOP
            L_REQUESTKEY := 'VSTP.' || L_VERSION;
            PCK_BANKAPI.BANK_UNHOLDBALANCE(REC2.REQTXNUM, REC2.MSGACCT, REC2.MSGAMT, 'BANKUNHOLDEDBYBROKERTPRL', L_REQUESTKEY, 'PPBs - Unhold to pay for the buy order', SYSTEMNUMS.C_SYSTEM_USERID, P_ERR_CODE);
            IF P_ERR_CODE <> SYSTEMNUMS.C_SUCCESS THEN
                PLOG.ERROR ('PR_VSTP_SETTLE_UNHOLD: AUTOID = ' || REC.AUTOID || '-' || SQLERRM || ' ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
                --log so lan xu ly de trach xu ly vo tan
                L_ERRMSG := 'PR_VSTP_SETTLE_UNHOLD: AUTOID = ' || REC.AUTOID || '-' || SQLERRM || ' ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
                UPDATE VSTP_SETTLE_LOG
                SET PROCESS = PROCESS + 1,
                    ERRMSG = SUBSTR(L_ERRMSG, 1, 500)
                WHERE VERSION = L_VERSION;

                CONTINUE;
            END IF;

            L_HOLDBALACE := L_HOLDBALACE + REC2.MSGAMT;
            UPDATE CRBTXREQ SET GRPREQID = L_VERSION WHERE REQID = REC2.REQID;
        END LOOP;

        --co hold tprl f8 moi xu ly tiep
        IF L_HOLDBALACE > 0  THEN
            UPDATE VSTP_SETTLE_LOG
            SET STATUS = '1', PSTATUS = STATUS, BEFOR_HOLD = L_HOLDBALACE, PROCESS = 0, LASTCHANGE = SYSTIMESTAMP
            WHERE CUSTODYCD = REC.CUSTODYCD
            AND DDACCTNO = REC.DDACCTNO
            AND MEMBERID = REC.MEMBERID
            AND STATUS = '0';
        END IF;
    END LOOP;
EXCEPTION WHEN OTHERS THEN
    RETURN;
END;
/
