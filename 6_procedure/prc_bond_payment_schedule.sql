SET DEFINE OFF;
CREATE OR REPLACE PROCEDURE PRC_BOND_PAYMENT_SCHEDULE(PV_DATA VARCHAR2)
IS
    L_CURRDATE DATE;
    L_INTLASTDT DATE;
    L_INTNEXTDT DATE;
    L_PAYMENTDATE DATE;
    L_EXPDATE DATE;
    L_COUPON NUMBER;
BEGIN
    L_CURRDATE := GETCURRDATE;

    FOR REC IN (
        SELECT DT.*, BO.AUTOID
        FROM
        (
            SELECT JT.*
            FROM (
                SELECT PV_DATA JSON
                FROM DUAL
            ) DT,
            JSON_TABLE(
                DT.JSON, '$[*]'
                COLUMNS (
                    CODEID VARCHAR2(20) PATH '$.CODEID',
                    PARVALUE NUMBER PATH '$.PARVALUE',
                    ISSUEDATE VARCHAR2(20) PATH '$.ISSUEDATE',
                    EXPDATE VARCHAR2(20) PATH '$.EXPDATE',
                    PERIODINTEREST VARCHAR2(20) PATH '$.PERIODINTEREST',
                    INTCOUPON NUMBER PATH '$.INTCOUPON',
                    INTERESTDATE NUMBER PATH '$.INTERESTDATE',
                    PAYMENTHOLIDAY VARCHAR2(20) PATH '$.PAYMENTHOLIDAY'
                )
            ) AS JT
        ) DT,
        (
            SELECT * FROM BOND_PAYMENT_SCHEDULE WHERE DELTD = 'N'
        ) BO
        WHERE DT.CODEID = BO.CODEID(+)
    )
    LOOP
        L_INTLASTDT := TO_DATE(REC.ISSUEDATE,'DD/MM/RRRR');
        L_EXPDATE := TO_DATE(REC.EXPDATE, 'DD/MM/RRRR');

        SELECT CASE WHEN REC.PERIODINTEREST = '001' THEN TO_DATE(L_INTLASTDT, 'DD/MM/RRRR') + 1
                    WHEN REC.PERIODINTEREST = '002' THEN ADD_MONTHS(TO_DATE(L_INTLASTDT, 'DD/MM/RRRR'), 1)
                    WHEN REC.PERIODINTEREST = '003' THEN ADD_MONTHS(TO_DATE(L_INTLASTDT, 'DD/MM/RRRR'), 3)
                    WHEN REC.PERIODINTEREST = '004' THEN ADD_MONTHS(TO_DATE(L_INTLASTDT, 'DD/MM/RRRR'), 6)
                    WHEN REC.PERIODINTEREST = '005' THEN ADD_MONTHS(TO_DATE(L_INTLASTDT, 'DD/MM/RRRR'), 12)
                    WHEN REC.PERIODINTEREST = '999' THEN TO_DATE(REC.EXPDATE, 'DD/MM/RRRR')
                    ELSE L_EXPDATE
                END
                INTO L_INTNEXTDT
        FROM DUAL;

        IF REC.AUTOID IS NOT NULL THEN
            IF L_INTNEXTDT <= L_CURRDATE THEN
                L_INTLASTDT := L_INTNEXTDT;

                SELECT CASE WHEN REC.PERIODINTEREST = '001' THEN TO_DATE(L_INTLASTDT, 'DD/MM/RRRR') + 1
                            WHEN REC.PERIODINTEREST = '002' THEN ADD_MONTHS(TO_DATE(L_INTLASTDT, 'DD/MM/RRRR'), 1)
                            WHEN REC.PERIODINTEREST = '003' THEN ADD_MONTHS(TO_DATE(L_INTLASTDT, 'DD/MM/RRRR'), 3)
                            WHEN REC.PERIODINTEREST = '004' THEN ADD_MONTHS(TO_DATE(L_INTLASTDT, 'DD/MM/RRRR'), 6)
                            WHEN REC.PERIODINTEREST = '005' THEN ADD_MONTHS(TO_DATE(L_INTLASTDT, 'DD/MM/RRRR'), 12)
                            WHEN REC.PERIODINTEREST = '999' THEN TO_DATE(REC.EXPDATE, 'DD/MM/RRRR')
                            ELSE L_EXPDATE
                        END
                        INTO L_INTNEXTDT
                FROM DUAL;
            END IF;
        END IF;

        IF L_INTNEXTDT >= L_EXPDATE THEN
            RETURN;
        END IF;

        SELECT CASE WHEN REC.PAYMENTHOLIDAY = '001' THEN (SELECT MIN(SBDATE) FROM SBCLDR WHERE SBDATE >= L_INTNEXTDT AND HOLIDAY = 'N' AND CLDRTYPE = '000')
                    WHEN REC.PAYMENTHOLIDAY = '002' THEN (SELECT MAX(SBDATE) FROM SBCLDR WHERE SBDATE <= L_INTNEXTDT AND HOLIDAY = 'N' AND CLDRTYPE = '000')
                    ELSE (SELECT MIN(SBDATE) FROM SBCLDR WHERE SBDATE >= L_INTNEXTDT AND HOLIDAY = 'N' AND CLDRTYPE = '000')
               END
               INTO L_PAYMENTDATE
        FROM DUAL;

        SELECT (CASE WHEN REC.INTERESTDATE = 0 THEN 0 ELSE ROUND(REC.PARVALUE * (L_INTNEXTDT - L_INTLASTDT) * REC.INTCOUPON / REC.INTERESTDATE, 10) END)
        INTO L_COUPON
        FROM DUAL;

        IF REC.AUTOID IS NOT NULL THEN
            UPDATE BOND_PAYMENT_SCHEDULE
            SET INTLASTDT = L_INTLASTDT,
                INTNEXTDT = L_INTNEXTDT,
                PAYMENTDATE = L_PAYMENTDATE,
                COUPON = L_COUPON,
                UPDATED_AT = SYSTIMESTAMP
            WHERE AUTOID = REC.AUTOID;
        ELSE
            INSERT INTO BOND_PAYMENT_SCHEDULE(AUTOID, CODEID, INTLASTDT, INTNEXTDT, PAYMENTDATE, COUPON, CREATED_AT)
            VALUES (SEQ_BOND_PAYMENT_SCHEDULE.NEXTVAL, REC.CODEID, L_INTLASTDT, L_INTNEXTDT, L_PAYMENTDATE, L_COUPON, SYSTIMESTAMP);
        END IF;

    END LOOP;
EXCEPTION WHEN OTHERS THEN
    PLOG.ERROR('PRC_BOND_PAYMENT_SCHEDULE ERROR: ' || SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
END;
/
