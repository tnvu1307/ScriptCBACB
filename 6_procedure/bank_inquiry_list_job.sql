SET DEFINE OFF;
CREATE OR REPLACE PROCEDURE bank_inquiry_list_job
IS
    L_REQCODE VARCHAR2(50);
    L_REQKEY VARCHAR2(50);
    L_DESC VARCHAR2(1000);
    L_TLID VARCHAR2(50);
    L_ERR_CODE VARCHAR2(50);
    L_TXTIME TIMESTAMP;
    L_TXTIME_BEGIN VARCHAR2(50);
    L_TXTIME_END VARCHAR2(50);
    L_TIME VARCHAR2(50);
    L_CHECK BOOLEAN;
    L_COUNT_CRB NUMBER;
    L_COUNT_DD NUMBER;
     L_COUNT NUMBER;
     pkgctx   plog.log_ctx;
BEGIN

    L_TXTIME := SYSTIMESTAMP;
    L_TXTIME_BEGIN := TO_CHAR(SYSTIMESTAMP - (1/1440), 'HH24:MI:SS');
    L_TXTIME_END := TO_CHAR(SYSTIMESTAMP + (1/1440), 'HH24:MI:SS');
    L_CHECK := FALSE;
    L_TIME := '00:00';

    IF L_CHECK = FALSE THEN
        BEGIN
            SELECT VARVALUE INTO L_TIME FROM SYSVAR WHERE GRNAME = 'JOB' AND VARNAME = 'AUTOINQ1';
            IF TO_DATE(L_TIME, 'HH24:MI:SS') >= TO_DATE(L_TXTIME_BEGIN, 'HH24:MI:SS') AND TO_DATE(L_TIME, 'HH24:MI:SS') <= TO_DATE(L_TXTIME_END, 'HH24:MI:SS') THEN
                L_CHECK := TRUE;
            END IF;
        EXCEPTION WHEN OTHERS THEN
            L_CHECK := FALSE;
        END;
    END IF;

    IF L_CHECK = FALSE THEN
        BEGIN
            SELECT VARVALUE INTO L_TIME FROM SYSVAR WHERE GRNAME = 'JOB' AND VARNAME = 'AUTOINQ2';
            IF TO_DATE(L_TIME, 'HH24:MI:SS') >= TO_DATE(L_TXTIME_BEGIN, 'HH24:MI:SS') AND TO_DATE(L_TIME, 'HH24:MI:SS') <= TO_DATE(L_TXTIME_END, 'HH24:MI:SS') THEN
                L_CHECK := TRUE;
            END IF;
        EXCEPTION WHEN OTHERS THEN
            L_CHECK := FALSE;
        END;
    END IF;

    IF L_CHECK = FALSE THEN
        BEGIN
            SELECT VARVALUE INTO L_TIME FROM SYSVAR WHERE GRNAME = 'JOB' AND VARNAME = 'AUTOINQ3';
            IF TO_DATE(L_TIME, 'HH24:MI:SS') >= TO_DATE(L_TXTIME_BEGIN, 'HH24:MI:SS') AND TO_DATE(L_TIME, 'HH24:MI:SS') <= TO_DATE(L_TXTIME_END, 'HH24:MI:SS') THEN
                L_CHECK := TRUE;
            END IF;
        EXCEPTION WHEN OTHERS THEN
            L_CHECK := FALSE;
        END;
    END IF;

    IF L_CHECK = TRUE THEN
        L_REQKEY := TO_CHAR(GETCURRDATE,'RRRRMMDD') || L_TIME;
        SELECT COUNT(1) INTO L_COUNT_CRB FROM CRBTXREQ WHERE TRFCODE = 'INQUIRY' AND REQCODE = 'INQACCTAUTO' AND REQTXNUM = L_REQKEY;
        IF L_COUNT_CRB = 0 THEN
            L_REQCODE := 'INQACCTAUTO';
            L_TLID := '0001';
            L_DESC := 'INQUIRY BALANCE';
            FOR REC IN (
                SELECT * FROM DDMAST
                WHERE STATUS <> 'C'
                AND CUSTODYCD NOT IN ('SHVECA4669')
                AND NVL(PAYMENTFEE, 'N') = 'N'
            ) LOOP
                PCK_BANKAPI.BANK_INQUIRY(REC.ACCTNO, L_REQCODE, L_REQKEY, L_DESC, L_TLID, L_ERR_CODE);
                IF L_ERR_CODE <> SYSTEMNUMS.C_SUCCESS THEN
                    plog.error (pkgctx, SQLERRM || dbms_utility.format_error_backtrace);
                    ROLLBACK;
                    RETURN ;
                END IF;
            END LOOP;
        END IF;
    ELSE
        BEGIN
            SELECT REQTXNUM INTO L_REQKEY FROM CRBTXREQ WHERE REQID = (SELECT MAX(REQID) FROM CRBTXREQ WHERE TRFCODE = 'INQUIRY' AND REQCODE = 'INQACCTAUTO');

            SELECT COUNT(1) INTO L_COUNT_DD FROM DDMAST WHERE STATUS <> 'C';
            SELECT COUNT(1) INTO L_COUNT_CRB FROM CRBTXREQ WHERE TRFCODE = 'INQUIRY' AND REQCODE = 'INQACCTAUTO' AND REQTXNUM = L_REQKEY AND STATUS IN ('C','E','R') AND UNHOLD = 'N';

            IF L_COUNT_CRB > 0 AND L_COUNT_DD = L_COUNT_CRB THEN
                SELECT COUNT(1) INTO L_COUNT
                FROM DDMAST DD,
                (
                    SELECT * FROM CRBTXREQ WHERE TRFCODE = 'INQUIRY' AND REQCODE = 'INQACCTAUTO' AND REQTXNUM = L_REQKEY
                ) CRB
                WHERE DD.ACCTNO = CRB.AFACCTNO
                AND DD.BALANCE <> CRB.TXAMT
                AND DD.CUSTODYCD NOT IN ('SHVECA4669')
                AND NVL(DD.PAYMENTFEE, 'N') = 'N';

                IF L_COUNT > 0 THEN
                    UPDATE CRBTXREQ SET UNHOLD = 'Y' WHERE TRFCODE = 'INQUIRY' AND REQCODE = 'INQACCTAUTO' AND REQTXNUM = L_REQKEY;
                    NMPKS_EMS.PR_SENDINTERNALEMAIL('SELECT * FROM DUAL', 'EM45', '','N');
                END IF;
            END IF;
        EXCEPTION WHEN OTHERS THEN
            RETURN;
        END;
    END IF;
    COMMIT;
EXCEPTION WHEN OTHERS THEN
    PLOG.ERROR ('BANK_INQUIRY_LIST_JOB: ' || SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
    RETURN;
END;
/
