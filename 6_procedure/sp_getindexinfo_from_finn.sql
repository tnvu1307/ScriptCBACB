SET DEFINE OFF;
CREATE OR REPLACE PROCEDURE sp_getindexinfo_from_finn
IS
    PKGCTX   PLOG.LOG_CTX;
BEGIN
    PLOG.SETBEGINSECTION(PKGCTX, 'SP_GETINDEXINFO_FROM_FINN');

    FOR REC IN (
        SELECT DT.*, INF.AUTOID, INF.TOTALSTOCK INF_TOTALSTOCK, INF.LISTINGVOLUME INF_LISTINGVOLUME, INF.OUTSTANDING INF_OUTSTANDING, INF.INDEXCATEGORY INF_INDEXCATEGORY ,INF.EXCHANGE INF_EXCHANGE, 0 LISTINGVOLUME, 0 MARKETCAP
        FROM
        (
            SELECT IND.*, NVL(TT.TOTALSTOCK, 0) TOTALSTOCK, NVL(TT.OUTSTANDING, 0) OUTSTANDING
            FROM
            (
                SELECT COMGROUPCODE INDEXCODE, TYPEINDEX INDEXCATEGORY, 'HSX' EXCHANGE
                FROM HOSEINDEX@LINKFIIN WHERE (COMGROUPCODE, TRADINGDATE) IN (SELECT COMGROUPCODE, MAX(TRADINGDATE) TRADINGDATE FROM HOSEINDEX@LINKFIIN GROUP BY COMGROUPCODE)
                UNION ALL
                SELECT COMGROUPCODE INDEXCODE, TYPEINDEX INDEXCATEGORY, 'HNX' EXCHANGE
                FROM HNXINDEX@LINKFIIN WHERE (COMGROUPCODE, TRADINGDATE) IN (SELECT COMGROUPCODE, MAX(TRADINGDATE) TRADINGDATE FROM HNXINDEX@LINKFIIN GROUP BY COMGROUPCODE)
                UNION ALL
                SELECT COMGROUPCODE INDEXCODE, TYPEINDEX INDEXCATEGORY, 'UPCOM' EXCHANGE
                FROM UPCOMINDEX@LINKFIIN WHERE (COMGROUPCODE, TRADINGDATE) IN (SELECT COMGROUPCODE, MAX(TRADINGDATE) TRADINGDATE FROM UPCOMINDEX@LINKFIIN GROUP BY COMGROUPCODE)
            ) IND,
            (
                SELECT GR.COMGROUPCODE INDEXCODE, COUNT(1) TOTALSTOCK, SUM(NVL(ORG.OUTSTANDINGSHARE, 0)) OUTSTANDING
                FROM GETCOMPANYCOMPANYGROUP@LINKFIIN GR, GETORGANIZATION@LINKFIIN ORG
                WHERE GR.ORGANCODE = ORG.ORGANCODE(+)
                GROUP BY GR.COMGROUPCODE
            ) TT
            WHERE IND.INDEXCODE = TT.INDEXCODE(+)
        ) DT
        LEFT JOIN INDEX_INFO INF ON INF.INDEXCODE = DT.INDEXCODE
    )LOOP


        IF REC.AUTOID IS NULL THEN
            INSERT INTO INDEX_INFO(AUTOID, INDEXCODE, TOTALSTOCK, MARKETCAP, LISTINGVOLUME, OUTSTANDING, INDEXCATEGORY, EXCHANGE, REQSTATUS, DESCRIPTION)
            VALUES(SEQ_INDEX_INFO.NEXTVAL, REC.INDEXCODE, REC.TOTALSTOCK, REC.MARKETCAP, REC.LISTINGVOLUME, REC.OUTSTANDING, REC.INDEXCATEGORY, REC.EXCHANGE, 'P', 'Sync index information');
        ELSE
            IF (REC.TOTALSTOCK > 0 AND REC.OUTSTANDING > 0)
                AND
                (REC.TOTALSTOCK <> REC.INF_TOTALSTOCK OR REC.OUTSTANDING <> REC.INF_OUTSTANDING OR REC.INDEXCATEGORY <> REC.INF_INDEXCATEGORY OR REC.EXCHANGE <> REC.INF_EXCHANGE)
            THEN
                UPDATE INDEX_INFO
                SET TOTALSTOCK = REC.TOTALSTOCK,
                    LISTINGVOLUME = REC.LISTINGVOLUME,
                    INDEXCATEGORY = REC.INDEXCATEGORY,
                    EXCHANGE = REC.EXCHANGE,
                    REQSTATUS = 'P'
                WHERE AUTOID = REC.AUTOID;
            END IF;
        END IF;
    END LOOP;
    COMMIT;
    PLOG.SETENDSECTION(PKGCTX, 'SP_GETINDEXINFO_FROM_FINN');
EXCEPTION WHEN OTHERS THEN
    PLOG.ERROR (PKGCTX, SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
    RETURN;
END;
/
